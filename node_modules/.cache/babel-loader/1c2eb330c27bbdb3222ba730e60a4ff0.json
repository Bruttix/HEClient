{"ast":null,"code":"import React from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{FormGroup,FormFeedback,Label,Input}from\"reactstrap\";import ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/Invalid/ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID\";import ACTION_ADMIN_NEW_PASSWORD from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/ACTION_ADMIN_NEW_PASSWORD\";import ACTION_ADMIN_NEW_PASSWORD_INVALID from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/Invalid/ACTION_ADMIN_NEW_PASSWORD_INVALID\";import ACTION_ADMIN_NEW_PASSWORD_VALID from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/Valid/ACTION_ADMIN_NEW_PASSWORD_VALID\";import ACTION_ADMIN_NEW_PASSWORD_NOT_VALID from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/Valid/ACTION_ADMIN_NEW_PASSWORD_NOT_VALID\";import ACTION_ADMIN_NEW_PASSWORD_RESET from\"../../../../actions/Admin/AdminLogin/AdminNewPassword/ACTION_ADMIN_NEW_PASSWORD_RESET\";import\"../AdminLoginPage.css\";const AdminNewPassword=()=>{const dispatch=useDispatch();// Admin New Password States\nconst adminNewPassword=useSelector(state=>state.adminNewPassword.admin_new_password);const adminNewPasswordInvalid=useSelector(state=>state.adminNewPasswordInvalid.admin_new_password_invalid);const adminNewPasswordValid=useSelector(state=>state.adminNewPasswordValid.admin_new_password_valid);const adminPasswordTyping=()=>{dispatch(ACTION_ADMIN_NEW_PASSWORD_RESET());dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID());};// Regular Expression for Password Validation - must be at least 8 characters long, must contain at least 1 lowercase character, 1 uppercase character, and 1 number\nconst passwordReg=/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;const validatePassword=e=>{const validPassword=passwordReg.test(e.currentTarget.value);dispatch(ACTION_ADMIN_NEW_PASSWORD(e.currentTarget.value.trim()));if(validPassword){dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID());dispatch(ACTION_ADMIN_NEW_PASSWORD_VALID());}else{dispatch(ACTION_ADMIN_NEW_PASSWORD_INVALID());dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_VALID());}};return/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{for:\"adminLoginPassword\"},/*#__PURE__*/React.createElement(\"div\",{className:\"required_label\"},\"New Password\")),/*#__PURE__*/React.createElement(Input,{type:\"password\",name:\"createNewAdminPassword\",defaultValue:adminNewPassword,maxLength:128,placeholder:\"Enter new password here\",className:\"input_field_sign_up\",onChange:adminPasswordTyping,onBlur:validatePassword,invalid:adminNewPassword===\"\"?false:adminNewPasswordInvalid?true:false,valid:adminNewPassword===\"\"?false:adminNewPasswordValid?true:false}),adminNewPassword.length<8?/*#__PURE__*/React.createElement(FormFeedback,{className:\"invalid_message_container\",invalid:\"true\"},\"Password must be at least 8 characters long.\"):/*#__PURE__*/React.createElement(FormFeedback,{className:\"invalid_message_container\",invalid:\"true\"},\"Password must contain at least 1 lowercase character, 1 uppercase character, and 1 number.\"));};export default AdminNewPassword;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/components/admin/AdminLogin/AdminNewPassword/AdminNewPassword.js"],"names":["React","useDispatch","useSelector","FormGroup","FormFeedback","Label","Input","ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID","ACTION_ADMIN_NEW_PASSWORD","ACTION_ADMIN_NEW_PASSWORD_INVALID","ACTION_ADMIN_NEW_PASSWORD_VALID","ACTION_ADMIN_NEW_PASSWORD_NOT_VALID","ACTION_ADMIN_NEW_PASSWORD_RESET","AdminNewPassword","dispatch","adminNewPassword","state","admin_new_password","adminNewPasswordInvalid","admin_new_password_invalid","adminNewPasswordValid","admin_new_password_valid","adminPasswordTyping","passwordReg","validatePassword","e","validPassword","test","currentTarget","value","trim","length"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,SAAT,CAAoBC,YAApB,CAAkCC,KAAlC,CAAyCC,KAAzC,KAAsD,YAAtD,CACA,MAAOC,CAAAA,qCAAP,KAAkD,qGAAlD,CACA,MAAOC,CAAAA,yBAAP,KAAsC,iFAAtC,CACA,MAAOC,CAAAA,iCAAP,KAA8C,iGAA9C,CACA,MAAOC,CAAAA,+BAAP,KAA4C,6FAA5C,CACA,MAAOC,CAAAA,mCAAP,KAAgD,iGAAhD,CACA,MAAOC,CAAAA,+BAAP,KAA4C,uFAA5C,CACA,MAAO,uBAAP,CAEA,KAAMC,CAAAA,gBAAgB,CAAG,IAAM,CAC7B,KAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CAEA;AACA,KAAMc,CAAAA,gBAAgB,CAAGb,WAAW,CACjCc,KAAD,EAAWA,KAAK,CAACD,gBAAN,CAAuBE,kBADA,CAApC,CAGA,KAAMC,CAAAA,uBAAuB,CAAGhB,WAAW,CACxCc,KAAD,EAAWA,KAAK,CAACE,uBAAN,CAA8BC,0BADA,CAA3C,CAGA,KAAMC,CAAAA,qBAAqB,CAAGlB,WAAW,CACtCc,KAAD,EAAWA,KAAK,CAACI,qBAAN,CAA4BC,wBADA,CAAzC,CAIA,KAAMC,CAAAA,mBAAmB,CAAG,IAAM,CAChCR,QAAQ,CAACF,+BAA+B,EAAhC,CAAR,CACAE,QAAQ,CAACP,qCAAqC,EAAtC,CAAR,CACD,CAHD,CAKA;AACA,KAAMgB,CAAAA,WAAW,CAAG,uCAApB,CAEA,KAAMC,CAAAA,gBAAgB,CAAIC,CAAD,EAAO,CAC9B,KAAMC,CAAAA,aAAa,CAAGH,WAAW,CAACI,IAAZ,CAAiBF,CAAC,CAACG,aAAF,CAAgBC,KAAjC,CAAtB,CACAf,QAAQ,CAACN,yBAAyB,CAACiB,CAAC,CAACG,aAAF,CAAgBC,KAAhB,CAAsBC,IAAtB,EAAD,CAA1B,CAAR,CAEA,GAAIJ,aAAJ,CAAmB,CACjBZ,QAAQ,CAACP,qCAAqC,EAAtC,CAAR,CACAO,QAAQ,CAACJ,+BAA+B,EAAhC,CAAR,CACD,CAHD,IAGO,CACLI,QAAQ,CAACL,iCAAiC,EAAlC,CAAR,CACAK,QAAQ,CAACH,mCAAmC,EAApC,CAAR,CACD,CACF,CAXD,CAaA,mBACE,oBAAC,SAAD,mBACE,oBAAC,KAAD,EAAO,GAAG,CAAC,oBAAX,eACE,2BAAK,SAAS,CAAC,gBAAf,iBADF,CADF,cAIE,oBAAC,KAAD,EACE,IAAI,CAAC,UADP,CAEE,IAAI,CAAC,wBAFP,CAGE,YAAY,CAAEI,gBAHhB,CAIE,SAAS,CAAE,GAJb,CAKE,WAAW,CAAC,yBALd,CAME,SAAS,CAAC,qBANZ,CAOE,QAAQ,CAAEO,mBAPZ,CAQE,MAAM,CAAEE,gBARV,CASE,OAAO,CACLT,gBAAgB,GAAK,EAArB,CACI,KADJ,CAEIG,uBAAuB,CACvB,IADuB,CAEvB,KAdR,CAgBE,KAAK,CACHH,gBAAgB,GAAK,EAArB,CAA0B,KAA1B,CAAkCK,qBAAqB,CAAG,IAAH,CAAU,KAjBrE,EAJF,CAwBGL,gBAAgB,CAACgB,MAAjB,CAA0B,CAA1B,cACC,oBAAC,YAAD,EAAc,SAAS,CAAC,2BAAxB,CAAoD,OAAO,CAAC,MAA5D,iDADD,cAKC,oBAAC,YAAD,EAAc,SAAS,CAAC,2BAAxB,CAAoD,OAAO,CAAC,MAA5D,+FA7BJ,CADF,CAqCD,CAxED,CA0EA,cAAelB,CAAAA,gBAAf","sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\r\nimport ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/Invalid/ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID\";\r\nimport ACTION_ADMIN_NEW_PASSWORD from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/ACTION_ADMIN_NEW_PASSWORD\";\r\nimport ACTION_ADMIN_NEW_PASSWORD_INVALID from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/Invalid/ACTION_ADMIN_NEW_PASSWORD_INVALID\";\r\nimport ACTION_ADMIN_NEW_PASSWORD_VALID from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/Valid/ACTION_ADMIN_NEW_PASSWORD_VALID\";\r\nimport ACTION_ADMIN_NEW_PASSWORD_NOT_VALID from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/Valid/ACTION_ADMIN_NEW_PASSWORD_NOT_VALID\";\r\nimport ACTION_ADMIN_NEW_PASSWORD_RESET from \"../../../../actions/Admin/AdminLogin/AdminNewPassword/ACTION_ADMIN_NEW_PASSWORD_RESET\";\r\nimport \"../AdminLoginPage.css\";\r\n\r\nconst AdminNewPassword = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Admin New Password States\r\n  const adminNewPassword = useSelector(\r\n    (state) => state.adminNewPassword.admin_new_password\r\n  );\r\n  const adminNewPasswordInvalid = useSelector(\r\n    (state) => state.adminNewPasswordInvalid.admin_new_password_invalid\r\n  );\r\n  const adminNewPasswordValid = useSelector(\r\n    (state) => state.adminNewPasswordValid.admin_new_password_valid\r\n  );\r\n\r\n  const adminPasswordTyping = () => {\r\n    dispatch(ACTION_ADMIN_NEW_PASSWORD_RESET());\r\n    dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID());\r\n  };\r\n\r\n  // Regular Expression for Password Validation - must be at least 8 characters long, must contain at least 1 lowercase character, 1 uppercase character, and 1 number\r\n  const passwordReg = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n\r\n  const validatePassword = (e) => {\r\n    const validPassword = passwordReg.test(e.currentTarget.value);\r\n    dispatch(ACTION_ADMIN_NEW_PASSWORD(e.currentTarget.value.trim()));\r\n\r\n    if (validPassword) {\r\n      dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_INVALID());\r\n      dispatch(ACTION_ADMIN_NEW_PASSWORD_VALID());\r\n    } else {\r\n      dispatch(ACTION_ADMIN_NEW_PASSWORD_INVALID());\r\n      dispatch(ACTION_ADMIN_NEW_PASSWORD_NOT_VALID());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <Label for=\"adminLoginPassword\">\r\n        <div className=\"required_label\">New Password</div>\r\n      </Label>\r\n      <Input\r\n        type=\"password\"\r\n        name=\"createNewAdminPassword\"\r\n        defaultValue={adminNewPassword}\r\n        maxLength={128}\r\n        placeholder=\"Enter new password here\"\r\n        className=\"input_field_sign_up\"\r\n        onChange={adminPasswordTyping}\r\n        onBlur={validatePassword}\r\n        invalid={\r\n          adminNewPassword === \"\"\r\n            ? false\r\n            : adminNewPasswordInvalid\r\n            ? true\r\n            : false\r\n        }\r\n        valid={\r\n          adminNewPassword === \"\" ? false : adminNewPasswordValid ? true : false\r\n        }\r\n      />\r\n      {adminNewPassword.length < 8 ? (\r\n        <FormFeedback className=\"invalid_message_container\" invalid=\"true\">\r\n          Password must be at least 8 characters long.\r\n        </FormFeedback>\r\n      ) : (\r\n        <FormFeedback className=\"invalid_message_container\" invalid=\"true\">\r\n          Password must contain at least 1 lowercase character, 1 uppercase\r\n          character, and 1 number.\r\n        </FormFeedback>\r\n      )}\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default AdminNewPassword;\r\n"]},"metadata":{},"sourceType":"module"}