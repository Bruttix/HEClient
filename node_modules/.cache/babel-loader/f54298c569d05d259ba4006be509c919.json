{"ast":null,"code":"import _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\HEC\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\HEC\\\\Client\\\\src\\\\components\\\\admin\\\\AdminRouter.js\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\nimport AdminLoginPage from \"./AdminLogin/AdminLoginPage\";\nimport AdminMenu from \"./AdminMenu/AdminMenu\";\nimport AdminClients from \"./AdminClients/AdminClients\";\nimport AdminSchedule from \"./AdminSchedule/AdminSchedule\";\nimport AdminStaff from \"./AdminStaff/AdminStaff\";\nimport AdminNotifications from \"./AdminNotifications/AdminNotifications\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport getClientsQuery from \"../../graphql/queries/getClientsQuery\";\nimport getAllAppointmentsQuery from \"../../graphql/queries/getAllAppointmentsQuery\";\nimport getAllPersonalEventsQuery from \"../../graphql/queries/getAllPersonalEventsQuery\";\nimport resetNotificationsMutation from \"../../graphql/mutations/resetNotificationsMutation\";\nimport randomColor from \"randomcolor\";\nimport LargeScreenSideMenu from \"../account/LargeScreenSideMenu/LargeScreenSideMenu\";\nimport { Font } from \"@react-pdf/renderer\";\nimport { useDispatch, useSelector } from \"react-redux\"; // Font Relative Imports\n\nimport MontserratLightSrc from \"../../MontserratFont/ttf/Montserrat-Light.ttf\";\nimport MontserratRegularSrc from \"../../MontserratFont/ttf/Montserrat-Regular.ttf\";\nimport MontserratMediumSrc from \"../../MontserratFont/ttf/Montserrat-Medium.ttf\";\nimport MontserratSemiBoldSrc from \"../../MontserratFont/ttf/Montserrat-SemiBold.ttf\";\nimport MontserratBoldSrc from \"../../MontserratFont/ttf/Montserrat-Bold.ttf\";\nimport MontserratBlackSrc from \"../../MontserratFont/ttf/Montserrat-Black.ttf\";\nimport ACTION_ON_ACTIVITY_PAGE from \"../../actions/Admin/OnActivityPage/ACTION_ON_ACTIVITY_PAGE\";\nimport ACTION_SPLASH_SCREEN_COMPLETE from \"../../actions/SplashScreenComplete/ACTION_SPLASH_SCREEN_COMPLETE\";\nimport ACTION_SPLASH_SCREEN_HALFWAY from \"../../actions/SplashScreenHalfway/ACTION_SPLASH_SCREEN_HALFWAY\";\nimport ACTION_NAVBAR_IS_VISIBLE from \"../../actions/NavbarIsVisible/ACTION_NAVBAR_IS_VISIBLE\";\nimport ACTION_NAVBAR_NOT_VISIBLE from \"../../actions/NavbarIsVisible/ACTION_NAVBAR_NOT_VISIBLE\";\nimport \"../../components/account/clientprofile/MyProfile/MyProfile.css\";\nimport \"../../components/account/clientprofile/ConsentForm/ConsentForm.css\";\nimport \"../../components/account/clientprofile/MyAppointments/MyAppointments.css\";\nimport \"../../components/account/clientprofile/ClientProfile.css\";\nimport \"../../components/checkout/SummaryReviewCards/SummaryReviewCards.css\";\nimport \"../../bootstrap_forms.min.css\";\nconst AdminRouter = React.forwardRef((props, ref) => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const getEmployeeData = props.getEmployeeData,\n        getEmployeeError = props.getEmployeeError,\n        getEmployeesError = props.getEmployeesError,\n        path = props.path,\n        initialScreenSize = props.initialScreenSize,\n        currentScreenSize = props.currentScreenSize,\n        getEmployeeLoading = props.getEmployeeLoading,\n        employeeDataRefetch = props.employeeDataRefetch,\n        getEmployeesData = props.getEmployeesData,\n        getEmployeesRefetch = props.getEmployeesRefetch,\n        handleClickToScrollToHome = props.handleClickToScrollToHome;\n\n  const _useQuery = useQuery(getClientsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        getClientsData = _useQuery.data,\n        getClientsRefetch = _useQuery.refetch,\n        getClientsLoading = _useQuery.loading;\n\n  const _useQuery2 = useQuery(getAllAppointmentsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        getAllAppointmentsData = _useQuery2.data,\n        getAllAppointmentsRefetch = _useQuery2.refetch;\n\n  const _useQuery3 = useQuery(getAllPersonalEventsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        getAllPersonalEventsData = _useQuery3.data,\n        getAllPersonalEventsRefetch = _useQuery3.refetch;\n\n  const splashScreenHalfway = useSelector(state => state.splashScreenHalfway.splashScreenHalfway);\n  const splashScreenComplete = useSelector(state => state.splashScreenComplete.splashScreenComplete);\n  const randomColorArray = useMemo(() => {\n    if (getClientsData) {\n      if (getClientsData.clients.length > 0) {\n        return randomColor({\n          count: getClientsData.clients.length,\n          hue: \"#0081B1\",\n          format: \"rgba\",\n          luminosity: \"dark\",\n          alpha: 0.7\n        });\n      }\n    }\n  }, [getClientsData]);\n\n  const _useMutation = useMutation(resetNotificationsMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        resetNotifications = _useMutation2[0];\n\n  useEffect(() => {\n    if (location.pathname === \"/admin\") {\n      dispatch(ACTION_NAVBAR_NOT_VISIBLE());\n    } else {\n      dispatch(ACTION_NAVBAR_IS_VISIBLE());\n    }\n  }, [dispatch, location.pathname]);\n  useEffect(() => {\n    if (location.pathname.includes(\"activity\")) {\n      dispatch(ACTION_ON_ACTIVITY_PAGE());\n    }\n  }, [location.pathname, dispatch]);\n\n  const registerFont = () => {\n    Font.register({\n      family: \"Montserrat\",\n      fonts: [{\n        src: MontserratLightSrc,\n        fontStyle: \"normal\",\n        fontWeight: 300\n      }, {\n        src: MontserratRegularSrc,\n        fontStyle: \"normal\",\n        fontWeight: 400\n      }, {\n        src: MontserratMediumSrc,\n        fontStyle: \"normal\",\n        fontWeight: 500\n      }, {\n        src: MontserratSemiBoldSrc,\n        fontStyle: \"normal\",\n        fontWeight: 600\n      }, {\n        src: MontserratBoldSrc,\n        fontStyle: \"normal\",\n        fontWeight: 700\n      }, {\n        src: MontserratBlackSrc,\n        fontStyle: \"normal\",\n        fontWeight: 900\n      }]\n    });\n  };\n\n  useMemo(() => {\n    registerFont();\n  }, []);\n  useEffect(() => {\n    if (!splashScreenComplete) {\n      dispatch(ACTION_SPLASH_SCREEN_COMPLETE());\n    }\n\n    if (!splashScreenHalfway) {\n      dispatch(ACTION_SPLASH_SCREEN_HALFWAY());\n    }\n  }, [dispatch, splashScreenComplete, splashScreenHalfway]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LargeScreenSideMenu, {\n    initialScreenSize: initialScreenSize,\n    currentScreenSize: currentScreenSize,\n    getEmployeeData: getEmployeeData ? getEmployeeData : null,\n    employeeDataRefetch: employeeDataRefetch,\n    getClientsLoading: getClientsLoading,\n    handleClickToScrollToHome: handleClickToScrollToHome,\n    ref: ref,\n    resetNotifications: resetNotifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path,\n    render: () => /*#__PURE__*/React.createElement(AdminLoginPage, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      employeeDataRefetch: employeeDataRefetch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path + \"/menu\",\n    render: () => /*#__PURE__*/React.createElement(AdminMenu, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      employeeDataRefetch: employeeDataRefetch,\n      resetNotifications: resetNotifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path + \"/activity\",\n    onLeave: () => resetNotifications(),\n    render: () => /*#__PURE__*/React.createElement(AdminNotifications, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      getEmployeeLoading: getEmployeeLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path + \"/clients\",\n    render: () => /*#__PURE__*/React.createElement(AdminClients, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      getEmployeeError: getEmployeeError,\n      getEmployeesError: getEmployeesError,\n      getClientsData: getClientsData ? getClientsData : null,\n      getClientsRefetch: getClientsRefetch,\n      getClientsLoading: getClientsLoading,\n      randomColorArray: randomColorArray ? randomColorArray : null,\n      resetNotifications: resetNotifications,\n      employeeDataRefetch: employeeDataRefetch,\n      getEmployeesRefetch: getEmployeesRefetch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path + \"/staff\",\n    render: () => /*#__PURE__*/React.createElement(AdminStaff, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getClientsData: getClientsData ? getClientsData : null,\n      getClientsLoading: getClientsLoading,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      getEmployeeError: getEmployeeError,\n      getEmployeesError: getEmployeesError,\n      employeeDataRefetch: employeeDataRefetch,\n      getEmployeesData: getEmployeesData,\n      getEmployeesRefetch: getEmployeesRefetch,\n      getAllAppointmentsData: getAllAppointmentsData,\n      getAllAppointmentsRefetch: getAllAppointmentsRefetch,\n      randomColorArray: randomColorArray ? randomColorArray : null,\n      resetNotifications: resetNotifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path + \"/schedule\",\n    render: () => /*#__PURE__*/React.createElement(AdminSchedule, {\n      initialScreenSize: initialScreenSize,\n      currentScreenSize: currentScreenSize,\n      getAllAppointmentsData: getAllAppointmentsData,\n      getAllAppointmentsRefetch: getAllAppointmentsRefetch,\n      getEmployeeData: getEmployeeData ? getEmployeeData : null,\n      getEmployeeError: getEmployeeError,\n      getEmployeesError: getEmployeesError,\n      getEmployeesData: getEmployeesData ? getEmployeesData : null,\n      getClientsData: getClientsData ? getClientsData : null,\n      getClientsRefetch: getClientsRefetch,\n      getAllPersonalEventsData: getAllPersonalEventsData,\n      getAllPersonalEventsRefetch: getAllPersonalEventsRefetch,\n      randomColorArray: randomColorArray ? randomColorArray : null,\n      resetNotifications: resetNotifications,\n      employeeDataRefetch: employeeDataRefetch,\n      getEmployeesRefetch: getEmployeesRefetch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    render: () => /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  })));\n});\nexport default AdminRouter;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/MERN-barberShops/HEC/Client/src/components/admin/AdminRouter.js"],"names":["React","useEffect","useMemo","Switch","Route","Redirect","useLocation","AdminLoginPage","AdminMenu","AdminClients","AdminSchedule","AdminStaff","AdminNotifications","useMutation","useQuery","getClientsQuery","getAllAppointmentsQuery","getAllPersonalEventsQuery","resetNotificationsMutation","randomColor","LargeScreenSideMenu","Font","useDispatch","useSelector","MontserratLightSrc","MontserratRegularSrc","MontserratMediumSrc","MontserratSemiBoldSrc","MontserratBoldSrc","MontserratBlackSrc","ACTION_ON_ACTIVITY_PAGE","ACTION_SPLASH_SCREEN_COMPLETE","ACTION_SPLASH_SCREEN_HALFWAY","ACTION_NAVBAR_IS_VISIBLE","ACTION_NAVBAR_NOT_VISIBLE","AdminRouter","forwardRef","props","ref","location","dispatch","getEmployeeData","getEmployeeError","getEmployeesError","path","initialScreenSize","currentScreenSize","getEmployeeLoading","employeeDataRefetch","getEmployeesData","getEmployeesRefetch","handleClickToScrollToHome","fetchPolicy","getClientsData","data","getClientsRefetch","refetch","getClientsLoading","loading","getAllAppointmentsData","getAllAppointmentsRefetch","getAllPersonalEventsData","getAllPersonalEventsRefetch","splashScreenHalfway","state","splashScreenComplete","randomColorArray","clients","length","count","hue","format","luminosity","alpha","resetNotifications","pathname","includes","registerFont","register","family","fonts","src","fontStyle","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\r\nimport AdminLoginPage from \"./AdminLogin/AdminLoginPage\";\r\nimport AdminMenu from \"./AdminMenu/AdminMenu\";\r\nimport AdminClients from \"./AdminClients/AdminClients\";\r\nimport AdminSchedule from \"./AdminSchedule/AdminSchedule\";\r\nimport AdminStaff from \"./AdminStaff/AdminStaff\";\r\nimport AdminNotifications from \"./AdminNotifications/AdminNotifications\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport getClientsQuery from \"../../graphql/queries/getClientsQuery\";\r\nimport getAllAppointmentsQuery from \"../../graphql/queries/getAllAppointmentsQuery\";\r\nimport getAllPersonalEventsQuery from \"../../graphql/queries/getAllPersonalEventsQuery\";\r\nimport resetNotificationsMutation from \"../../graphql/mutations/resetNotificationsMutation\";\r\nimport randomColor from \"randomcolor\";\r\nimport LargeScreenSideMenu from \"../account/LargeScreenSideMenu/LargeScreenSideMenu\";\r\nimport { Font } from \"@react-pdf/renderer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// Font Relative Imports\r\nimport MontserratLightSrc from \"../../MontserratFont/ttf/Montserrat-Light.ttf\";\r\nimport MontserratRegularSrc from \"../../MontserratFont/ttf/Montserrat-Regular.ttf\";\r\nimport MontserratMediumSrc from \"../../MontserratFont/ttf/Montserrat-Medium.ttf\";\r\nimport MontserratSemiBoldSrc from \"../../MontserratFont/ttf/Montserrat-SemiBold.ttf\";\r\nimport MontserratBoldSrc from \"../../MontserratFont/ttf/Montserrat-Bold.ttf\";\r\nimport MontserratBlackSrc from \"../../MontserratFont/ttf/Montserrat-Black.ttf\";\r\nimport ACTION_ON_ACTIVITY_PAGE from \"../../actions/Admin/OnActivityPage/ACTION_ON_ACTIVITY_PAGE\";\r\nimport ACTION_SPLASH_SCREEN_COMPLETE from \"../../actions/SplashScreenComplete/ACTION_SPLASH_SCREEN_COMPLETE\";\r\nimport ACTION_SPLASH_SCREEN_HALFWAY from \"../../actions/SplashScreenHalfway/ACTION_SPLASH_SCREEN_HALFWAY\";\r\nimport ACTION_NAVBAR_IS_VISIBLE from \"../../actions/NavbarIsVisible/ACTION_NAVBAR_IS_VISIBLE\";\r\nimport ACTION_NAVBAR_NOT_VISIBLE from \"../../actions/NavbarIsVisible/ACTION_NAVBAR_NOT_VISIBLE\";\r\nimport \"../../components/account/clientprofile/MyProfile/MyProfile.css\";\r\nimport \"../../components/account/clientprofile/ConsentForm/ConsentForm.css\";\r\nimport \"../../components/account/clientprofile/MyAppointments/MyAppointments.css\";\r\nimport \"../../components/account/clientprofile/ClientProfile.css\";\r\nimport \"../../components/checkout/SummaryReviewCards/SummaryReviewCards.css\";\r\nimport \"../../bootstrap_forms.min.css\";\r\n\r\nconst AdminRouter = React.forwardRef((props, ref) => {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    getEmployeeData,\r\n    getEmployeeError,\r\n    getEmployeesError,\r\n    path,\r\n    initialScreenSize,\r\n    currentScreenSize,\r\n    getEmployeeLoading,\r\n    employeeDataRefetch,\r\n    getEmployeesData,\r\n    getEmployeesRefetch,\r\n    handleClickToScrollToHome,\r\n  } = props;\r\n\r\n  const {\r\n    data: getClientsData,\r\n    refetch: getClientsRefetch,\r\n    loading: getClientsLoading,\r\n  } = useQuery(getClientsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const {\r\n    data: getAllAppointmentsData,\r\n    refetch: getAllAppointmentsRefetch,\r\n  } = useQuery(getAllAppointmentsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const {\r\n    data: getAllPersonalEventsData,\r\n    refetch: getAllPersonalEventsRefetch,\r\n  } = useQuery(getAllPersonalEventsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const splashScreenHalfway = useSelector(\r\n    (state) => state.splashScreenHalfway.splashScreenHalfway\r\n  );\r\n  const splashScreenComplete = useSelector(\r\n    (state) => state.splashScreenComplete.splashScreenComplete\r\n  );\r\n\r\n  const randomColorArray = useMemo(() => {\r\n    if (getClientsData) {\r\n      if (getClientsData.clients.length > 0) {\r\n        return randomColor({\r\n          count: getClientsData.clients.length,\r\n          hue: \"#0081B1\",\r\n          format: \"rgba\",\r\n          luminosity: \"dark\",\r\n          alpha: 0.7,\r\n        });\r\n      }\r\n    }\r\n  }, [getClientsData]);\r\n\r\n  const [resetNotifications] = useMutation(resetNotificationsMutation);\r\n\r\n  useEffect(() => {\r\n    if (location.pathname === \"/admin\") {\r\n      dispatch(ACTION_NAVBAR_NOT_VISIBLE());\r\n    } else {\r\n      dispatch(ACTION_NAVBAR_IS_VISIBLE());\r\n    }\r\n  }, [dispatch, location.pathname]);\r\n\r\n  useEffect(() => {\r\n    if (location.pathname.includes(\"activity\")) {\r\n      dispatch(ACTION_ON_ACTIVITY_PAGE());\r\n    }\r\n  }, [location.pathname, dispatch]);\r\n\r\n  const registerFont = () => {\r\n    Font.register({\r\n      family: \"Montserrat\",\r\n      fonts: [\r\n        {\r\n          src: MontserratLightSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 300,\r\n        },\r\n        {\r\n          src: MontserratRegularSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 400,\r\n        },\r\n        {\r\n          src: MontserratMediumSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 500,\r\n        },\r\n        {\r\n          src: MontserratSemiBoldSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 600,\r\n        },\r\n        {\r\n          src: MontserratBoldSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 700,\r\n        },\r\n        {\r\n          src: MontserratBlackSrc,\r\n          fontStyle: \"normal\",\r\n          fontWeight: 900,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  useMemo(() => {\r\n    registerFont();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!splashScreenComplete) {\r\n      dispatch(ACTION_SPLASH_SCREEN_COMPLETE());\r\n    }\r\n    if (!splashScreenHalfway) {\r\n      dispatch(ACTION_SPLASH_SCREEN_HALFWAY());\r\n    }\r\n  }, [dispatch, splashScreenComplete, splashScreenHalfway]);\r\n\r\n  return (\r\n    <>\r\n      <LargeScreenSideMenu\r\n        initialScreenSize={initialScreenSize}\r\n        currentScreenSize={currentScreenSize}\r\n        getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n        employeeDataRefetch={employeeDataRefetch}\r\n        getClientsLoading={getClientsLoading}\r\n        handleClickToScrollToHome={handleClickToScrollToHome}\r\n        ref={ref}\r\n        resetNotifications={resetNotifications}\r\n      />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path={path}\r\n          render={() => (\r\n            <AdminLoginPage\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              employeeDataRefetch={employeeDataRefetch}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path={path + \"/menu\"}\r\n          render={() => (\r\n            <AdminMenu\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              employeeDataRefetch={employeeDataRefetch}\r\n              resetNotifications={resetNotifications}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path={path + \"/activity\"}\r\n          onLeave={() => resetNotifications()}\r\n          render={() => (\r\n            <AdminNotifications\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              getEmployeeLoading={getEmployeeLoading}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path={path + \"/clients\"}\r\n          render={() => (\r\n            <AdminClients\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              getEmployeeError={getEmployeeError}\r\n              getEmployeesError={getEmployeesError}\r\n              getClientsData={getClientsData ? getClientsData : null}\r\n              getClientsRefetch={getClientsRefetch}\r\n              getClientsLoading={getClientsLoading}\r\n              randomColorArray={randomColorArray ? randomColorArray : null}\r\n              resetNotifications={resetNotifications}\r\n              employeeDataRefetch={employeeDataRefetch}\r\n              getEmployeesRefetch={getEmployeesRefetch}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path={path + \"/staff\"}\r\n          render={() => (\r\n            <AdminStaff\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getClientsData={getClientsData ? getClientsData : null}\r\n              getClientsLoading={getClientsLoading}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              getEmployeeError={getEmployeeError}\r\n              getEmployeesError={getEmployeesError}\r\n              employeeDataRefetch={employeeDataRefetch}\r\n              getEmployeesData={getEmployeesData}\r\n              getEmployeesRefetch={getEmployeesRefetch}\r\n              getAllAppointmentsData={getAllAppointmentsData}\r\n              getAllAppointmentsRefetch={getAllAppointmentsRefetch}\r\n              randomColorArray={randomColorArray ? randomColorArray : null}\r\n              resetNotifications={resetNotifications}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path={path + \"/schedule\"}\r\n          render={() => (\r\n            <AdminSchedule\r\n              initialScreenSize={initialScreenSize}\r\n              currentScreenSize={currentScreenSize}\r\n              getAllAppointmentsData={getAllAppointmentsData}\r\n              getAllAppointmentsRefetch={getAllAppointmentsRefetch}\r\n              getEmployeeData={getEmployeeData ? getEmployeeData : null}\r\n              getEmployeeError={getEmployeeError}\r\n              getEmployeesError={getEmployeesError}\r\n              getEmployeesData={getEmployeesData ? getEmployeesData : null}\r\n              getClientsData={getClientsData ? getClientsData : null}\r\n              getClientsRefetch={getClientsRefetch}\r\n              getAllPersonalEventsData={getAllPersonalEventsData}\r\n              getAllPersonalEventsRefetch={getAllPersonalEventsRefetch}\r\n              randomColorArray={randomColorArray ? randomColorArray : null}\r\n              resetNotifications={resetNotifications}\r\n              employeeDataRefetch={employeeDataRefetch}\r\n              getEmployeesRefetch={getEmployeesRefetch}\r\n            />\r\n          )}\r\n        />\r\n        {/* If no path matches, redirect to home */}\r\n        <Route render={() => <Redirect to=\"/\" />} />\r\n      </Switch>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default AdminRouter;\r\n"]},"metadata":{},"sourceType":"module"}