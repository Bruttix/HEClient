{"ast":null,"code":"import _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\src\\\\components\\\\account\\\\signup\\\\CreateAccountEmail\\\\CreateAccountEmail.js\";\nimport React, { useState, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport getClientsQuery from \"../../../../graphql/queries/getClientsQuery\";\nimport isEmail from \"validator/lib/isEmail\";\nimport ACTION_CREATE_ACCOUNT_EMAIL from \"../../../../actions/CreateAccount/CreateAccountEmail/ACTION_CREATE_ACCOUNT_EMAIL\";\nimport ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Invalid/ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID\";\nimport ACTION_CREATE_ACCOUNT_EMAIL_VALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Valid/ACTION_CREATE_ACCOUNT_EMAIL_VALID\";\nimport ACTION_CREATE_ACCOUNT_EMAIL_INVALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Invalid/ACTION_CREATE_ACCOUNT_EMAIL_INVALID\";\nimport ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Valid/ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID\";\nimport ACTION_CREATE_ACCOUNT_EMAIL_RESET from \"../../../../actions/CreateAccount/CreateAccountEmail/ACTION_CREATE_ACCOUNT_EMAIL_RESET\";\nimport \"../SignUp.css\";\n\nconst CreateAccountEmail = () => {\n  const dispatch = useDispatch(); // Email States\n\n  const createAccountEmail = useSelector(state => state.createAccountEmail.create_account_email);\n  const createAccountEmailValid = useSelector(state => state.createAccountEmailValid.create_account_email_valid);\n  const createAccountEmailInvalid = useSelector(state => state.createAccountEmailInvalid.create_account_email_invalid);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailAlreadyRegistered = _useState2[0],\n        changeEmailAlreadyRegistered = _useState2[1]; // Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\n\n\n  const emailReg = /^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;\n\n  const _useQuery = useQuery(getClientsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        data = _useQuery.data;\n\n  const validateEmail = e => {\n    const validEmail = emailReg.test(e.currentTarget.value);\n    const validatorTest = isEmail(e.currentTarget.value);\n    dispatch(ACTION_CREATE_ACCOUNT_EMAIL(e.currentTarget.value.trim()));\n\n    if (!emailAlreadyRegistered) {\n      if (validEmail && validatorTest) {\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID());\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_VALID());\n      } else {\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_INVALID());\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID());\n      }\n    } else {\n      dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID());\n      dispatch(ACTION_CREATE_ACCOUNT_EMAIL_VALID());\n    }\n  };\n\n  useMemo(() => {\n    if (createAccountEmail) {\n      if (data) {\n        for (let i = 0; i < data.clients.length; i++) {\n          if (data.clients[i].email === createAccountEmail) {\n            if (data.clients[i].password !== null || data.clients[i].tokenCount > 0) {\n              changeEmailAlreadyRegistered(true);\n              dispatch(ACTION_CREATE_ACCOUNT_EMAIL_INVALID());\n              dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID());\n            }\n          }\n        }\n      }\n    }\n  }, [dispatch, data, createAccountEmail]);\n\n  const emailTyping = () => {\n    dispatch(ACTION_CREATE_ACCOUNT_EMAIL_RESET());\n    changeEmailAlreadyRegistered(false);\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"sign_up_individual_form_field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"createAccountEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"required_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"required_label red_asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }\n  }, \"* \"))), /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"createAccountEmail\",\n    defaultValue: createAccountEmail,\n    maxLength: 128,\n    placeholder: \"Email address\",\n    className: \"input_field_sign_up\",\n    onChange: emailTyping,\n    onBlur: validateEmail,\n    invalid: createAccountEmail === \"\" ? false : createAccountEmailInvalid ? true : false,\n    valid: createAccountEmail === \"\" ? false : createAccountEmailValid ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), emailAlreadyRegistered ? /*#__PURE__*/React.createElement(FormFeedback, {\n    className: \"invalid_message_container\",\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"This email has already been registered.\") : /*#__PURE__*/React.createElement(FormFeedback, {\n    className: \"invalid_message_container\",\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Please enter a valid email address.\"));\n};\n\nexport default CreateAccountEmail;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/components/account/signup/CreateAccountEmail/CreateAccountEmail.js"],"names":["React","useState","useMemo","useDispatch","useSelector","FormGroup","FormFeedback","Label","Input","useQuery","getClientsQuery","isEmail","ACTION_CREATE_ACCOUNT_EMAIL","ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID","ACTION_CREATE_ACCOUNT_EMAIL_VALID","ACTION_CREATE_ACCOUNT_EMAIL_INVALID","ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID","ACTION_CREATE_ACCOUNT_EMAIL_RESET","CreateAccountEmail","dispatch","createAccountEmail","state","create_account_email","createAccountEmailValid","create_account_email_valid","createAccountEmailInvalid","create_account_email_invalid","emailAlreadyRegistered","changeEmailAlreadyRegistered","emailReg","fetchPolicy","data","validateEmail","e","validEmail","test","currentTarget","value","validatorTest","trim","i","clients","length","email","password","tokenCount","emailTyping"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport getClientsQuery from \"../../../../graphql/queries/getClientsQuery\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL from \"../../../../actions/CreateAccount/CreateAccountEmail/ACTION_CREATE_ACCOUNT_EMAIL\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Invalid/ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL_VALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Valid/ACTION_CREATE_ACCOUNT_EMAIL_VALID\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL_INVALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Invalid/ACTION_CREATE_ACCOUNT_EMAIL_INVALID\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID from \"../../../../actions/CreateAccount/CreateAccountEmail/Validation/Valid/ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID\";\r\nimport ACTION_CREATE_ACCOUNT_EMAIL_RESET from \"../../../../actions/CreateAccount/CreateAccountEmail/ACTION_CREATE_ACCOUNT_EMAIL_RESET\";\r\nimport \"../SignUp.css\";\r\n\r\nconst CreateAccountEmail = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Email States\r\n  const createAccountEmail = useSelector(\r\n    (state) => state.createAccountEmail.create_account_email\r\n  );\r\n  const createAccountEmailValid = useSelector(\r\n    (state) => state.createAccountEmailValid.create_account_email_valid\r\n  );\r\n  const createAccountEmailInvalid = useSelector(\r\n    (state) => state.createAccountEmailInvalid.create_account_email_invalid\r\n  );\r\n  const [emailAlreadyRegistered, changeEmailAlreadyRegistered] = useState(\r\n    false\r\n  );\r\n\r\n  // Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\r\n  const emailReg = /^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;\r\n\r\n  const { data } = useQuery(getClientsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const validateEmail = (e) => {\r\n    const validEmail = emailReg.test(e.currentTarget.value);\r\n    const validatorTest = isEmail(e.currentTarget.value);\r\n    dispatch(ACTION_CREATE_ACCOUNT_EMAIL(e.currentTarget.value.trim()));\r\n\r\n    if (!emailAlreadyRegistered) {\r\n      if (validEmail && validatorTest) {\r\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID());\r\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_VALID());\r\n      } else {\r\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_INVALID());\r\n        dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID());\r\n      }\r\n    } else {\r\n      dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_INVALID());\r\n      dispatch(ACTION_CREATE_ACCOUNT_EMAIL_VALID());\r\n    }\r\n  };\r\n\r\n  useMemo(() => {\r\n    if (createAccountEmail) {\r\n      if (data) {\r\n        for (let i = 0; i < data.clients.length; i++) {\r\n          if (data.clients[i].email === createAccountEmail) {\r\n            if (\r\n              data.clients[i].password !== null ||\r\n              data.clients[i].tokenCount > 0\r\n            ) {\r\n              changeEmailAlreadyRegistered(true);\r\n              dispatch(ACTION_CREATE_ACCOUNT_EMAIL_INVALID());\r\n              dispatch(ACTION_CREATE_ACCOUNT_EMAIL_NOT_VALID());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [dispatch, data, createAccountEmail]);\r\n\r\n  const emailTyping = () => {\r\n    dispatch(ACTION_CREATE_ACCOUNT_EMAIL_RESET());\r\n    changeEmailAlreadyRegistered(false);\r\n  };\r\n\r\n  return (\r\n    <FormGroup className=\"sign_up_individual_form_field\">\r\n      <Label for=\"createAccountEmail\">\r\n        <div className=\"required_label\">\r\n          Email<p className=\"required_label red_asterisk\">* </p>\r\n        </div>\r\n      </Label>\r\n      <Input\r\n        type=\"email\"\r\n        name=\"createAccountEmail\"\r\n        defaultValue={createAccountEmail}\r\n        maxLength={128}\r\n        placeholder=\"Email address\"\r\n        className=\"input_field_sign_up\"\r\n        onChange={emailTyping}\r\n        onBlur={validateEmail}\r\n        invalid={\r\n          createAccountEmail === \"\"\r\n            ? false\r\n            : createAccountEmailInvalid\r\n            ? true\r\n            : false\r\n        }\r\n        valid={\r\n          createAccountEmail === \"\"\r\n            ? false\r\n            : createAccountEmailValid\r\n            ? true\r\n            : false\r\n        }\r\n      />\r\n      {emailAlreadyRegistered ? (\r\n        <FormFeedback className=\"invalid_message_container\" invalid=\"true\">\r\n          This email has already been registered.\r\n        </FormFeedback>\r\n      ) : (\r\n        <FormFeedback className=\"invalid_message_container\" invalid=\"true\">\r\n          Please enter a valid email address.\r\n        </FormFeedback>\r\n      )}\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default CreateAccountEmail;\r\n"]},"metadata":{},"sourceType":"module"}