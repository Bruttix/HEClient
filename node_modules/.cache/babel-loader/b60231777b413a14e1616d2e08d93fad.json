{"ast":null,"code":"import _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\backup-July4\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\backup-July4\\\\Client\\\\src\\\\components\\\\admin\\\\AdminSchedule\\\\AdminCreateAppointment\\\\Autosuggest\\\\ClientAutosuggest.js\";\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport LZString from \"lz-string\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ACTION_ADMIN_CLIENT_FIRST_NAME from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientFirstName/ACTION_ADMIN_CLIENT_FIRST_NAME\";\nimport ACTION_ADMIN_CLIENT_EMAIL from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientEmail/ACTION_ADMIN_CLIENT_EMIAL\";\nimport ACTION_ADMIN_CLIENT_PHONE_NUMBER from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientPhoneNumber/ACTION_ADMIN_CLIENT_PHONE_NUMBER\";\nimport ACTION_ADMIN_CLIENT_LAST_NAME from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientLastName/ACTION_ADMIN_CLIENT_LAST_NAME\";\n\nconst ClientAutosuggest = props => {\n  const dispatch = useDispatch();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputSuggestions = _useState2[0],\n        changeInputSuggestions = _useState2[1];\n\n  const adminClientFirstName = useSelector(state => state.adminClientFirstName.admin_client_first_name);\n\n  const inputChange = (event, {\n    newValue\n  }) => {\n    dispatch(ACTION_ADMIN_CLIENT_FIRST_NAME(newValue));\n  };\n\n  const inputProps = {\n    placeholder: \"Client first name\",\n    value: adminClientFirstName,\n    onChange: inputChange\n  };\n  const clientSuggestions = props.getClientsData ? props.getClientsData.clients ? props.getClientsData.clients.map((x, i) => {\n    return {\n      firstName: x.firstName,\n      lastName: x.lastName,\n      email: x.email,\n      phoneNumber: x.phoneNumber,\n      profilePicture: x.profilePicture ? /*#__PURE__*/React.createElement(\"img\", {\n        className: \"autosuggest_client_profile_picture\",\n        src: LZString.decompressFromEncodedURIComponent(x.profilePicture),\n        alt: x.firstName[0].toUpperCase() + x.firstName.slice(1).toLowerCase() + \" \" + x.lastName[0].toUpperCase() + x.lastName.slice(1).toLowerCase() + \" Profile Picture\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"autosuggest_client_initials_square\",\n        style: {\n          background: props.randomColorArray ? props.randomColorArray[i] : \"rgb(255, 255, 255)\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }, x.firstName[0].toUpperCase() + x.lastName[0].toUpperCase()))\n    };\n  }) : null : null;\n\n  const getSuggestions = value => {\n    const inputValue = value ? value.trim().toLowerCase() : \"\";\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n      return [];\n    } else {\n      if (clientSuggestions) {\n        return clientSuggestions.filter(x => {\n          const clientFullName = x.firstName.toLowerCase() + \" \" + x.lastName.toLowerCase();\n\n          if (clientFullName.slice(0, inputLength) === inputValue) {\n            return clientFullName.slice(0, inputLength) === inputValue;\n          } else if (x.lastName.toLowerCase().slice(0, inputLength) === inputValue) {\n            return x.lastName.toLowerCase().slice(0, inputLength) === inputValue;\n          } else if (x.email.toLowerCase().slice(0, inputLength) === inputValue) {\n            return x.email.toLowerCase().slice(0, inputLength) === inputValue;\n          } else if (x.phoneNumber.includes(inputValue)) {\n            return x.phoneNumber.includes(inputValue);\n          } else {\n            return null;\n          }\n        });\n      } else {\n        return [];\n      }\n    }\n  };\n\n  const renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_individual_client_suggestion_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, suggestion.profilePicture, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_individual_client_suggestion_contact_information_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, suggestion.firstName[0].toUpperCase() + suggestion.firstName.slice(1).toLowerCase(), \" \", suggestion.lastName[0].toUpperCase() + suggestion.lastName.slice(1).toLowerCase()), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, suggestion.email), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, suggestion.phoneNumber)));\n\n  const getSuggestionValue = suggestion => {\n    dispatch(ACTION_ADMIN_CLIENT_EMAIL(suggestion.email));\n    dispatch(ACTION_ADMIN_CLIENT_PHONE_NUMBER(suggestion.phoneNumber));\n    dispatch(ACTION_ADMIN_CLIENT_LAST_NAME(suggestion.lastName[0].toUpperCase() + suggestion.lastName.slice(1).toLowerCase()));\n    dispatch(ACTION_ADMIN_CLIENT_FIRST_NAME(suggestion.firstName[0].toUpperCase() + suggestion.firstName.slice(1).toLowerCase()));\n    return suggestion.firstName[0].toUpperCase() + suggestion.firstName.slice(1).toLowerCase();\n  };\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    changeInputSuggestions(getSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    changeInputSuggestions([]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Autosuggest, {\n    suggestions: inputSuggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ClientAutosuggest;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/MERN-barberShops/backup-July4/Client/src/components/admin/AdminSchedule/AdminCreateAppointment/Autosuggest/ClientAutosuggest.js"],"names":["React","useState","Autosuggest","LZString","useDispatch","useSelector","ACTION_ADMIN_CLIENT_FIRST_NAME","ACTION_ADMIN_CLIENT_EMAIL","ACTION_ADMIN_CLIENT_PHONE_NUMBER","ACTION_ADMIN_CLIENT_LAST_NAME","ClientAutosuggest","props","dispatch","inputSuggestions","changeInputSuggestions","adminClientFirstName","state","admin_client_first_name","inputChange","event","newValue","inputProps","placeholder","value","onChange","clientSuggestions","getClientsData","clients","map","x","i","firstName","lastName","email","phoneNumber","profilePicture","decompressFromEncodedURIComponent","toUpperCase","slice","toLowerCase","background","randomColorArray","getSuggestions","inputValue","trim","inputLength","length","filter","clientFullName","includes","renderSuggestion","suggestion","getSuggestionValue","onSuggestionsFetchRequested","onSuggestionsClearRequested"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport LZString from \"lz-string\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ACTION_ADMIN_CLIENT_FIRST_NAME from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientFirstName/ACTION_ADMIN_CLIENT_FIRST_NAME\";\r\nimport ACTION_ADMIN_CLIENT_EMAIL from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientEmail/ACTION_ADMIN_CLIENT_EMIAL\";\r\nimport ACTION_ADMIN_CLIENT_PHONE_NUMBER from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientPhoneNumber/ACTION_ADMIN_CLIENT_PHONE_NUMBER\";\r\nimport ACTION_ADMIN_CLIENT_LAST_NAME from \"../../../../../actions/Admin/AdminCreateAppointment/AdminClientLastName/ACTION_ADMIN_CLIENT_LAST_NAME\";\r\n\r\nconst ClientAutosuggest = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [inputSuggestions, changeInputSuggestions] = useState([]);\r\n\r\n  const adminClientFirstName = useSelector(\r\n    (state) => state.adminClientFirstName.admin_client_first_name\r\n  );\r\n\r\n  const inputChange = (event, { newValue }) => {\r\n    dispatch(ACTION_ADMIN_CLIENT_FIRST_NAME(newValue));\r\n  };\r\n\r\n  const inputProps = {\r\n    placeholder: \"Client first name\",\r\n    value: adminClientFirstName,\r\n    onChange: inputChange,\r\n  };\r\n\r\n  const clientSuggestions = props.getClientsData\r\n    ? props.getClientsData.clients\r\n      ? props.getClientsData.clients.map((x, i) => {\r\n          return {\r\n            firstName: x.firstName,\r\n            lastName: x.lastName,\r\n            email: x.email,\r\n            phoneNumber: x.phoneNumber,\r\n            profilePicture: x.profilePicture ? (\r\n              <img\r\n                className=\"autosuggest_client_profile_picture\"\r\n                src={LZString.decompressFromEncodedURIComponent(\r\n                  x.profilePicture\r\n                )}\r\n                alt={\r\n                  x.firstName[0].toUpperCase() +\r\n                  x.firstName.slice(1).toLowerCase() +\r\n                  \" \" +\r\n                  x.lastName[0].toUpperCase() +\r\n                  x.lastName.slice(1).toLowerCase() +\r\n                  \" Profile Picture\"\r\n                }\r\n              />\r\n            ) : (\r\n              <div\r\n                className=\"autosuggest_client_initials_square\"\r\n                style={{\r\n                  background: props.randomColorArray\r\n                    ? props.randomColorArray[i]\r\n                    : \"rgb(255, 255, 255)\",\r\n                }}\r\n              >\r\n                <p>\r\n                  {x.firstName[0].toUpperCase() + x.lastName[0].toUpperCase()}\r\n                </p>\r\n              </div>\r\n            ),\r\n          };\r\n        })\r\n      : null\r\n    : null;\r\n\r\n  const getSuggestions = (value) => {\r\n    const inputValue = value ? value.trim().toLowerCase() : \"\";\r\n    const inputLength = inputValue.length;\r\n\r\n    if (inputLength === 0) {\r\n      return [];\r\n    } else {\r\n      if (clientSuggestions) {\r\n        return clientSuggestions.filter((x) => {\r\n          const clientFullName =\r\n            x.firstName.toLowerCase() + \" \" + x.lastName.toLowerCase();\r\n\r\n          if (clientFullName.slice(0, inputLength) === inputValue) {\r\n            return clientFullName.slice(0, inputLength) === inputValue;\r\n          } else if (\r\n            x.lastName.toLowerCase().slice(0, inputLength) === inputValue\r\n          ) {\r\n            return (\r\n              x.lastName.toLowerCase().slice(0, inputLength) === inputValue\r\n            );\r\n          } else if (\r\n            x.email.toLowerCase().slice(0, inputLength) === inputValue\r\n          ) {\r\n            return x.email.toLowerCase().slice(0, inputLength) === inputValue;\r\n          } else if (x.phoneNumber.includes(inputValue)) {\r\n            return x.phoneNumber.includes(inputValue);\r\n          } else {\r\n            return null;\r\n          }\r\n        });\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <div className=\"admin_individual_client_suggestion_container\">\r\n      {suggestion.profilePicture}\r\n      <div className=\"admin_individual_client_suggestion_contact_information_container\">\r\n        <p>\r\n          {suggestion.firstName[0].toUpperCase() +\r\n            suggestion.firstName.slice(1).toLowerCase()}{\" \"}\r\n          {suggestion.lastName[0].toUpperCase() +\r\n            suggestion.lastName.slice(1).toLowerCase()}\r\n        </p>\r\n        <p>{suggestion.email}</p>\r\n        <p>{suggestion.phoneNumber}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const getSuggestionValue = (suggestion) => {\r\n    dispatch(ACTION_ADMIN_CLIENT_EMAIL(suggestion.email));\r\n    dispatch(ACTION_ADMIN_CLIENT_PHONE_NUMBER(suggestion.phoneNumber));\r\n    dispatch(\r\n      ACTION_ADMIN_CLIENT_LAST_NAME(\r\n        suggestion.lastName[0].toUpperCase() +\r\n          suggestion.lastName.slice(1).toLowerCase()\r\n      )\r\n    );\r\n    dispatch(\r\n      ACTION_ADMIN_CLIENT_FIRST_NAME(\r\n        suggestion.firstName[0].toUpperCase() +\r\n          suggestion.firstName.slice(1).toLowerCase()\r\n      )\r\n    );\r\n\r\n    return (\r\n      suggestion.firstName[0].toUpperCase() +\r\n      suggestion.firstName.slice(1).toLowerCase()\r\n    );\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    changeInputSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  const onSuggestionsClearRequested = () => {\r\n    changeInputSuggestions([]);\r\n  };\r\n  return (\r\n    <>\r\n      <Autosuggest\r\n        suggestions={inputSuggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientAutosuggest;\r\n"]},"metadata":{},"sourceType":"module"}