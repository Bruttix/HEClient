{"ast":null,"code":"import { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { ApolloClient, InMemoryCache, split, HttpLink } from \"@apollo/client\";\nconst GRAPHQL_ENDPOINT = process.env.REACT_APP_ENV === \"production\" ? \"wss://\".concat(process.env.REACT_APP_PRODUCTION_SERVER_ROOT, \"/graphql\") : \"ws://localhost:4000/graphql\";\nconst client = new SubscriptionClient(GRAPHQL_ENDPOINT, {\n  reconnect: true\n});\nconst webSocketsLink = new WebSocketLink(client);\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_ENV === \"production\" ? \"\".concat(process.env.REACT_APP_PRODUCTION_SERVER_URL, \"/graphql\") : \"http://localhost:4000/graphql\",\n  credentials: \"include\"\n});\nconst link = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, webSocketsLink, httpLink);\nconst apolloClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n  onError: ({\n    graphQLErrors\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message\n      }) => console.log(message));\n    }\n  }\n});\nexport default apolloClient;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/MERN-barberShops/HEC/Client/src/apolloClient.js"],"names":["SubscriptionClient","WebSocketLink","getMainDefinition","ApolloClient","InMemoryCache","split","HttpLink","GRAPHQL_ENDPOINT","process","env","REACT_APP_ENV","REACT_APP_PRODUCTION_SERVER_ROOT","client","reconnect","webSocketsLink","httpLink","uri","REACT_APP_PRODUCTION_SERVER_URL","credentials","link","query","definition","kind","operation","apolloClient","cache","onError","graphQLErrors","map","message","console","log"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,4BAAnC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,KAAtC,EAA6CC,QAA7C,QAA6D,gBAA7D;AAEA,MAAMC,gBAAgB,GACpBC,OAAO,CAACC,GAAR,CAAYC,aAAZ,KAA8B,YAA9B,mBACaF,OAAO,CAACC,GAAR,CAAYE,gCADzB,gBAEI,6BAHN;AAKA,MAAMC,MAAM,GAAG,IAAIZ,kBAAJ,CAAuBO,gBAAvB,EAAyC;AACtDM,EAAAA,SAAS,EAAE;AAD2C,CAAzC,CAAf;AAIA,MAAMC,cAAc,GAAG,IAAIb,aAAJ,CAAkBW,MAAlB,CAAvB;AAEA,MAAMG,QAAQ,GAAG,IAAIT,QAAJ,CAAa;AAC5BU,EAAAA,GAAG,EACDR,OAAO,CAACC,GAAR,CAAYC,aAAZ,KAA8B,YAA9B,aACOF,OAAO,CAACC,GAAR,CAAYQ,+BADnB,gBAEI,+BAJsB;AAK5BC,EAAAA,WAAW,EAAE;AALe,CAAb,CAAjB;AAQA,MAAMC,IAAI,GAAGd,KAAK,CAChB,CAAC;AAAEe,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGnB,iBAAiB,CAACkB,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPe,EAQhBT,cARgB,EAShBC,QATgB,CAAlB;AAYA,MAAMS,YAAY,GAAG,IAAIrB,YAAJ,CAAiB;AACpCsB,EAAAA,KAAK,EAAE,IAAIrB,aAAJ,EAD6B;AAEpCe,EAAAA,IAFoC;AAGpCO,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAuB;AAC9B,QAAIA,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC;AACD;AACF;AAPmC,CAAjB,CAArB;AAUA,eAAeL,YAAf","sourcesContent":["import { SubscriptionClient } from \"subscriptions-transport-ws\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { ApolloClient, InMemoryCache, split, HttpLink } from \"@apollo/client\";\r\n\r\nconst GRAPHQL_ENDPOINT =\r\n  process.env.REACT_APP_ENV === \"production\"\r\n    ? `wss://${process.env.REACT_APP_PRODUCTION_SERVER_ROOT}/graphql`\r\n    : \"ws://localhost:4000/graphql\";\r\n\r\nconst client = new SubscriptionClient(GRAPHQL_ENDPOINT, {\r\n  reconnect: true,\r\n});\r\n\r\nconst webSocketsLink = new WebSocketLink(client);\r\n\r\nconst httpLink = new HttpLink({\r\n  uri:\r\n    process.env.REACT_APP_ENV === \"production\"\r\n      ? `${process.env.REACT_APP_PRODUCTION_SERVER_URL}/graphql`\r\n      : \"http://localhost:4000/graphql\",\r\n  credentials: \"include\",\r\n});\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  webSocketsLink,\r\n  httpLink\r\n);\r\n\r\nconst apolloClient = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link,\r\n  onError: ({ graphQLErrors }) => {\r\n    if (graphQLErrors) {\r\n      graphQLErrors.map(({ message }) => console.log(message));\r\n    }\r\n  },\r\n});\r\n\r\nexport default apolloClient;\r\n"]},"metadata":{},"sourceType":"module"}