{"ast":null,"code":"import _slicedToArray from\"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useMemo}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{FormGroup,FormFeedback,Label,Input}from\"reactstrap\";import isEmail from\"validator/lib/isEmail\";import{useQuery}from\"@apollo/react-hooks\";import getClientsQuery from\"../../../graphql/queries/getClientsQuery\";import ACTION_EMAIL from\"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL\";import ACTION_EMAIL_RESET from\"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL_RESET\";import ACTION_EMAIL_NOT_INVALID from\"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_NOT_INVALID\";import ACTION_EMAIL_VALID from\"../../../actions/EmailValidation/Valid/ACTION_EMAIL_VALID\";import ACTION_EMAIL_INVALID from\"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_INVALID\";import ACTION_EMAIL_NOT_VALID from\"../../../actions/EmailValidation/Valid/ACTION_EMAIL_NOT_VALID\";import ACTION_BOOKING_SUMMARY_NOT_ACTIVE from\"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";import\"../GuestCheckout.css\";const Email=()=>{const dispatch=useDispatch();// Email States\nconst email=useSelector(state=>state.email.email);const emailIsValid=useSelector(state=>state.emailIsValid.email_valid);const emailIsInvalid=useSelector(state=>state.emailIsInvalid.email_invalid);const _useState=useState(false),_useState2=_slicedToArray(_useState,2),emailAlreadyRegistered=_useState2[0],changeEmailAlreadyRegistered=_useState2[1];// Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\nconst emailReg=/^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;const _useQuery=useQuery(getClientsQuery,{fetchPolicy:\"no-cache\"}),data=_useQuery.data;const validateEmail=e=>{const validEmail=emailReg.test(e.currentTarget.value);const validatorTest=isEmail(e.currentTarget.value);dispatch(ACTION_EMAIL(e.currentTarget.value.trim()));if(!emailAlreadyRegistered){if(validEmail&&validatorTest){dispatch(ACTION_EMAIL_NOT_INVALID());dispatch(ACTION_EMAIL_VALID());}else{dispatch(ACTION_EMAIL_INVALID());dispatch(ACTION_EMAIL_NOT_VALID());dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());}}else{dispatch(ACTION_EMAIL_INVALID());dispatch(ACTION_EMAIL_NOT_VALID());dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());}};useMemo(()=>{if(email){if(data){for(let i=0;i<data.clients.length;i++){if(data.clients[i].email===email){if(data.clients[i].password!==null||data.clients[i].tokenCount>0){changeEmailAlreadyRegistered(true);dispatch(ACTION_EMAIL_INVALID());dispatch(ACTION_EMAIL_NOT_VALID());dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());}}}}}},[dispatch,data,email]);const emailTyping=()=>{dispatch(ACTION_EMAIL_RESET());changeEmailAlreadyRegistered(false);};return/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{for:\"guestEmail\"},/*#__PURE__*/React.createElement(\"div\",{className:\"required_label\"},\"Email\",/*#__PURE__*/React.createElement(\"p\",{className:\"required_label red_asterisk\"},\"* \"))),/*#__PURE__*/React.createElement(Input,{type:\"email\",name:\"email\",defaultValue:email,maxLength:128,placeholder:\"Email address\",className:\"input_field\",onChange:emailTyping,onBlur:validateEmail,invalid:email===\"\"?false:emailIsInvalid?true:false,valid:email===\"\"?false:emailIsValid?true:false}),emailAlreadyRegistered?/*#__PURE__*/React.createElement(FormFeedback,{invalid:\"true\"},\"This email has already been registered.\"):/*#__PURE__*/React.createElement(FormFeedback,{invalid:\"true\"},\"Please enter a valid email address.\"));};export default Email;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/components/checkout/Form/Email.js"],"names":["React","useState","useMemo","useDispatch","useSelector","FormGroup","FormFeedback","Label","Input","isEmail","useQuery","getClientsQuery","ACTION_EMAIL","ACTION_EMAIL_RESET","ACTION_EMAIL_NOT_INVALID","ACTION_EMAIL_VALID","ACTION_EMAIL_INVALID","ACTION_EMAIL_NOT_VALID","ACTION_BOOKING_SUMMARY_NOT_ACTIVE","Email","dispatch","email","state","emailIsValid","email_valid","emailIsInvalid","email_invalid","emailAlreadyRegistered","changeEmailAlreadyRegistered","emailReg","fetchPolicy","data","validateEmail","e","validEmail","test","currentTarget","value","validatorTest","trim","i","clients","length","password","tokenCount","emailTyping"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport getClientsQuery from \"../../../graphql/queries/getClientsQuery\";\r\nimport ACTION_EMAIL from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL\";\r\nimport ACTION_EMAIL_RESET from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL_RESET\";\r\nimport ACTION_EMAIL_NOT_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_NOT_INVALID\";\r\nimport ACTION_EMAIL_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_VALID\";\r\nimport ACTION_EMAIL_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_INVALID\";\r\nimport ACTION_EMAIL_NOT_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_NOT_VALID\";\r\nimport ACTION_BOOKING_SUMMARY_NOT_ACTIVE from \"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";\r\nimport \"../GuestCheckout.css\";\r\n\r\nconst Email = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Email States\r\n  const email = useSelector((state) => state.email.email);\r\n  const emailIsValid = useSelector((state) => state.emailIsValid.email_valid);\r\n  const emailIsInvalid = useSelector(\r\n    (state) => state.emailIsInvalid.email_invalid\r\n  );\r\n  const [emailAlreadyRegistered, changeEmailAlreadyRegistered] = useState(\r\n    false\r\n  );\r\n\r\n  // Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\r\n  const emailReg = /^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;\r\n\r\n  const { data } = useQuery(getClientsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const validateEmail = (e) => {\r\n    const validEmail = emailReg.test(e.currentTarget.value);\r\n    const validatorTest = isEmail(e.currentTarget.value);\r\n    dispatch(ACTION_EMAIL(e.currentTarget.value.trim()));\r\n\r\n    if (!emailAlreadyRegistered) {\r\n      if (validEmail && validatorTest) {\r\n        dispatch(ACTION_EMAIL_NOT_INVALID());\r\n        dispatch(ACTION_EMAIL_VALID());\r\n      } else {\r\n        dispatch(ACTION_EMAIL_INVALID());\r\n        dispatch(ACTION_EMAIL_NOT_VALID());\r\n        dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n      }\r\n    } else {\r\n      dispatch(ACTION_EMAIL_INVALID());\r\n      dispatch(ACTION_EMAIL_NOT_VALID());\r\n      dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n    }\r\n  };\r\n\r\n  useMemo(() => {\r\n    if (email) {\r\n      if (data) {\r\n        for (let i = 0; i < data.clients.length; i++) {\r\n          if (data.clients[i].email === email) {\r\n            if (\r\n              data.clients[i].password !== null ||\r\n              data.clients[i].tokenCount > 0\r\n            ) {\r\n              changeEmailAlreadyRegistered(true);\r\n              dispatch(ACTION_EMAIL_INVALID());\r\n              dispatch(ACTION_EMAIL_NOT_VALID());\r\n              dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [dispatch, data, email]);\r\n\r\n  const emailTyping = () => {\r\n    dispatch(ACTION_EMAIL_RESET());\r\n    changeEmailAlreadyRegistered(false);\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <Label for=\"guestEmail\">\r\n        <div className=\"required_label\">\r\n          Email<p className=\"required_label red_asterisk\">* </p>\r\n        </div>\r\n      </Label>\r\n      <Input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        defaultValue={email}\r\n        maxLength={128}\r\n        placeholder=\"Email address\"\r\n        className=\"input_field\"\r\n        onChange={emailTyping}\r\n        onBlur={validateEmail}\r\n        invalid={email === \"\" ? false : emailIsInvalid ? true : false}\r\n        valid={email === \"\" ? false : emailIsValid ? true : false}\r\n      />\r\n      {emailAlreadyRegistered ? (\r\n        <FormFeedback invalid=\"true\">\r\n          This email has already been registered.\r\n        </FormFeedback>\r\n      ) : (\r\n        <FormFeedback invalid=\"true\">\r\n          Please enter a valid email address.\r\n        </FormFeedback>\r\n      )}\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n"]},"metadata":{},"sourceType":"module"}