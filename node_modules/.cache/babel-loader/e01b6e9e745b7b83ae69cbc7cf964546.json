{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\src\\\\components\\\\admin\\\\AdminSchedule\\\\AdminCreateAppointment\\\\AdminPaymentInfo\\\\AdminPaymentInfo.js\";\nimport React, { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { SquarePaymentForm, CreditCardNumberInput, CreditCardExpirationDateInput, CreditCardPostalCodeInput, CreditCardCVVInput, CreditCardSubmitButton } from \"react-square-payment-form\";\nimport Dropdown from \"react-dropdown\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport updateClientSquareIDMutation from \"../../../../../graphql/mutations/updateClientSquareIDMutation\";\nimport updateUnsavedSquareCardIDsMutation from \"../../../../../graphql/mutations/updateUnsavedSquareCardIDsMutation\";\nimport ACTION_BOOKED_WITH_CARD_ID_RESET from \"../../../../../actions/PaymentInfo/BookedWithCardID/ACTION_BOOKED_WITH_CARD_ID_RESET\";\nimport ACTION_SQUARE_CUSTOMER_ID from \"../../../../../actions/PaymentInfo/SquareCustomerID/ACTION_SQUARE_CUSTOMER_ID\";\nimport ACTION_BOOKED_WITH_CARD_ID from \"../../../../../actions/PaymentInfo/BookedWithCardID/ACTION_BOOKED_WITH_CARD_ID\";\nimport \"./AdminPaymentInfo.css\";\n\nconst AdminPaymentInfo = props => {\n  const getClientsData = props.getClientsData,\n        getClientsRefetch = props.getClientsRefetch,\n        handleSubmitBooking = props.handleSubmitBooking;\n  const dispatch = useDispatch();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        errorMessages = _useState2[0],\n        changeErrorMessage = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        cardHolderFirstName = _useState4[0],\n        changeCardHolderFirstName = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        cardHolderLastName = _useState6[0],\n        changeCardHolderLastName = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        squareStoredCreditCards = _useState8[0],\n        changeSquareStoredCreditCards = _useState8[1];\n\n  const _useState9 = useState({\n    name: \"\",\n    id: \"\"\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        selectedCreditCard = _useState10[0],\n        changeSelectedCreditCard = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        selectedCreditCardFullData = _useState12[0],\n        changeSelectedCreditCardFullData = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        successfulCardNonce = _useState14[0],\n        changeSuccessfulCardNonce = _useState14[1];\n\n  const _useState15 = useState(\"\"),\n        _useState16 = _slicedToArray(_useState15, 2),\n        selectedClient = _useState16[0],\n        changeSelectedClient = _useState16[1];\n\n  const adminClientFirstName = useSelector(state => state.adminClientFirstName.admin_client_first_name);\n  const adminClientLastName = useSelector(state => state.adminClientLastName.admin_client_last_name);\n  const adminClientEmail = useSelector(state => state.adminClientEmail.admin_client_email);\n  const adminClientPhoneNumber = useSelector(state => state.adminClientPhoneNumber.admin_client_phone_number);\n  const bookedWithCardID = useSelector(state => state.bookedWithCardID.booked_with_card_id);\n\n  const _useMutation = useMutation(updateUnsavedSquareCardIDsMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        updateUnsavedSquareCardIDs = _useMutation2[0];\n\n  const _useMutation3 = useMutation(updateClientSquareIDMutation),\n        _useMutation4 = _slicedToArray(_useMutation3, 1),\n        updateClientSquareID = _useMutation4[0];\n\n  useEffect(() => {\n    if (selectedClient.length < 1) {\n      changeSelectedCreditCardFullData(\"\");\n      changeSelectedCreditCard({\n        name: \"\",\n        id: \"\"\n      });\n      changeSquareStoredCreditCards(\"\");\n    }\n  }, [selectedClient.length]);\n  useEffect(() => {\n    if (squareStoredCreditCards) {\n      if (selectedCreditCard && selectedCreditCard.name && selectedCreditCard.id) {\n        const creditCardSplitArr = selectedCreditCard.name.split(\" -\");\n        const fullData = squareStoredCreditCards.data.find(x => {\n          return x.card_brand === creditCardSplitArr[0].replace(\" \", \"_\").trim() && x.last_4 === creditCardSplitArr[creditCardSplitArr.length - 1].trim() && x.id === selectedCreditCard.id;\n        });\n\n        if (fullData) {\n          changeSelectedCreditCardFullData(fullData);\n        }\n      }\n    }\n  }, [selectedCreditCard, squareStoredCreditCards]);\n  useEffect(() => {\n    const iFrameLabel = [...document.getElementsByClassName(\"sq-label\")].filter(x => x.innerText === \"Credit Card\" || x.innerText === \"Expiration\" || x.innerText === \"Zip Code\" || x.innerText === \"CVC\");\n    const iFrameLabelHidden = [...document.getElementsByClassName(\"sq-label\")].filter(x => x.className.includes(\"sq-payment-form-hidden\"));\n\n    if (selectedCreditCardFullData) {\n      document.getElementById(\"sq-payment-form-sq-card-number\").classList.add(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-expiration-date\").classList.add(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-postal-code\").classList.add(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-cvv\").classList.add(\"sq-payment-form-hidden\");\n\n      if (iFrameLabel) {\n        if (iFrameLabel.length > 0) {\n          iFrameLabel.forEach(x => x.classList.add(\"sq-payment-form-hidden\"));\n        }\n      }\n    } else {\n      document.getElementById(\"sq-payment-form-sq-card-number\").classList.remove(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-expiration-date\").classList.remove(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-postal-code\").classList.remove(\"sq-payment-form-hidden\");\n      document.getElementById(\"sq-payment-form-sq-cvv\").classList.remove(\"sq-payment-form-hidden\");\n\n      if (iFrameLabelHidden) {\n        if (iFrameLabelHidden.length > 0) {\n          iFrameLabelHidden.forEach(x => {\n            x.classList.remove(\"sq-payment-form-hidden\");\n          });\n        }\n      }\n    }\n  }, [selectedCreditCardFullData]);\n  useEffect(() => {\n    if (getClientsData) {\n      if (getClientsData.clients) {\n        changeSelectedClient(getClientsData.clients.filter((x, i) => {\n          return x.firstName.toLowerCase() === adminClientFirstName.toLowerCase() && x.lastName.toLowerCase() === adminClientLastName.toLowerCase() && x.email.toLowerCase() === adminClientEmail.toLowerCase() && x.phoneNumber.toLowerCase() === adminClientPhoneNumber.toLowerCase();\n        }));\n      }\n    }\n  }, [adminClientLastName, adminClientFirstName, adminClientEmail, adminClientPhoneNumber, getClientsData]);\n  const retrieveSquareCustomerFunction = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return axios.post(\"http://localhost:4000/retrieve_customer\", {\n            data: {\n              squareCustomerId: selectedClient.length > 0 ? selectedClient[0].squareCustomerId : \"\"\n            }\n          }, {\n            headers: {\n              Authorization: \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN\n            }\n          }).catch(e => changeSquareStoredCreditCards(\"\"));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  })), [selectedClient]);\n  useEffect(() => {\n    if (squareStoredCreditCards) {\n      const cardFullData = squareStoredCreditCards.data.filter(x => x.id === selectedCreditCard.id)[0];\n\n      if (!selectedCreditCard.name) {\n        if (cardFullData) {\n          changeSelectedCreditCard({\n            name: cardFullData.card_brand.split(\"_\").join(\" \") + \" - \" + cardFullData.last_4,\n            id: cardFullData.id\n          });\n          changeSelectedCreditCardFullData(cardFullData);\n        }\n      }\n    }\n  }, [bookedWithCardID, squareStoredCreditCards, selectedCreditCard]);\n  const fetchData = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var customerData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return retrieveSquareCustomerFunction();\n\n        case 2:\n          customerData = _context2.sent;\n          changeSquareStoredCreditCards(customerData);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  })), [retrieveSquareCustomerFunction]);\n  useMemo(() => {\n    if (selectedClient.length > 0) {\n      if (selectedClient[0].squareCustomerId) {\n        fetchData();\n      } else {\n        changeSquareStoredCreditCards(\"\");\n      }\n    } else {\n      if (selectedClient.length === 0) {\n        changeSquareStoredCreditCards(\"\");\n      }\n    }\n  }, [selectedClient, fetchData]);\n\n  const renderStoredCreditCardOptions = () => {\n    if (squareStoredCreditCards) {\n      if (squareStoredCreditCards.data) {\n        return squareStoredCreditCards.data.filter(x => selectedClient.length > 0 ? selectedClient[0].unsavedSquareCardIDs.includes(x.id) : \"\").map((x, i) => {\n          return {\n            value: JSON.stringify({\n              name: x.card_brand.split(\"_\").join(\" \") + \" - \" + x.last_4,\n              id: x.id\n            }),\n            label: x.card_brand.split(\"_\").join(\" \") + \" - \" + x.last_4\n          };\n        });\n      } else {\n        return [{\n          value: JSON.stringify({\n            name: \"\",\n            id: \"\"\n          }),\n          label: \"No cards saved on file\"\n        }];\n      }\n    } else {\n      return [{\n        value: JSON.stringify({\n          name: \"\",\n          id: \"\"\n        }),\n        label: \"No cards saved on file\"\n      }];\n    }\n  };\n\n  const cardNonceResponseReceived = (errors, nonce, cardData, buyerVerificationToken) => {\n    if (errors[0] !== null) {\n      return changeErrorMessage(errors.map(error => error ? error.message : null));\n    } else {\n      changeErrorMessage([]);\n      let matchedClient;\n\n      if (getClientsData) {\n        for (let i = 0; i < getClientsData.clients.length; i++) {\n          if (getClientsData.clients[i].email === adminClientEmail) {\n            matchedClient = getClientsData.clients[i];\n          }\n        }\n      }\n\n      const squareCustomerData = {\n        family_name: adminClientFirstName,\n        given_name: adminClientLastName,\n        email_address: adminClientEmail,\n        phone_number: adminClientPhoneNumber\n      };\n\n      const squarePostRequestFunction = () => {\n        axios.post(\"http://localhost:4000/customers\", squareCustomerData, {\n          headers: {\n            Authorization: \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN\n          }\n        }).then(res => {\n          const squareData = {\n            card_nonce: nonce,\n            billing_address: {\n              postal_code: cardData.billing_postal_code\n            },\n            cardholder_name: (cardHolderFirstName ? cardHolderFirstName : adminClientFirstName).trim() + \" \" + (cardHolderLastName ? cardHolderLastName : adminClientLastName).trim(),\n            verification_token: buyerVerificationToken,\n            customerId: JSON.parse(res.request.response).customer.id\n          };\n\n          if (matchedClient) {\n            if (!matchedClient.squareCustomerId) {\n              updateClientSquareID({\n                variables: {\n                  squareCustomerId: JSON.parse(res.request.response).customer.id,\n                  firstName: adminClientFirstName,\n                  lastName: adminClientLastName,\n                  email: adminClientEmail\n                }\n              });\n              getClientsRefetch();\n            }\n          } else {\n            dispatch(ACTION_SQUARE_CUSTOMER_ID(JSON.parse(res.request.response).customer.id));\n          }\n\n          changeSuccessfulCardNonce(true);\n          updateUnsavedSquareCardIDs({\n            variables: {\n              unsavedSquareCardID: cardData.id,\n              firstName: adminClientFirstName,\n              lastName: adminClientLastName,\n              email: adminClientEmail\n            }\n          });\n          getClientsRefetch();\n          return axios.post(\"http://localhost:4000/customers/card\", squareData, {\n            headers: {\n              Authorization: \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN\n            }\n          });\n        }).then( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(res) {\n            var matchedDuplicateCard;\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (squareStoredCreditCards.data) {\n                    if (squareStoredCreditCards.data.some(x => x.billing_address.postal_code === res.data.card.billing_address.postal_code && x.card_brand === res.data.card.card_brand && x.cardholder_name === res.data.card.cardholder_name && x.exp_month === res.data.card.exp_month && x.exp_year === res.data.card.exp_year && x.last_4 === res.data.card.last_4)) {\n                      matchedDuplicateCard = squareStoredCreditCards.data.filter(x => x.billing_address.postal_code === res.data.card.billing_address.postal_code && x.card_brand === res.data.card.card_brand && x.cardholder_name === res.data.card.cardholder_name && x.exp_month === res.data.card.exp_month && x.exp_year === res.data.card.exp_year && x.last_4 === res.data.card.last_4)[0];\n                      dispatch(ACTION_BOOKED_WITH_CARD_ID(matchedDuplicateCard.id));\n                    }\n                  }\n\n                  dispatch(ACTION_BOOKED_WITH_CARD_ID(res.data.card.id));\n                  updateUnsavedSquareCardIDs({\n                    variables: {\n                      unsavedSquareCardID: res.data.card.id,\n                      firstName: adminClientFirstName,\n                      lastName: adminClientLastName,\n                      email: adminClientEmail\n                    }\n                  });\n                  getClientsRefetch();\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }()).catch(err => {\n          console.error(err);\n        });\n      };\n\n      const returningClientSquarePostRequestFunction = /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n          var squareData;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                squareData = {\n                  card_nonce: nonce,\n                  billing_address: {\n                    postal_code: cardData.billing_postal_code\n                  },\n                  cardholder_name: (cardHolderFirstName ? cardHolderFirstName : adminClientFirstName).trim() + \" \" + (cardHolderLastName ? cardHolderLastName : adminClientLastName).trim(),\n                  verification_token: buyerVerificationToken,\n                  customerId: matchedClient.squareCustomerId\n                };\n                changeSuccessfulCardNonce(true);\n                _context5.next = 4;\n                return axios.post(\"http://localhost:4000/customers/card\", squareData, {\n                  headers: {\n                    Authorization: \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN\n                  }\n                }).then( /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(res) {\n                    var matchedDuplicateCard;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) switch (_context4.prev = _context4.next) {\n                        case 0:\n                          if (squareStoredCreditCards.data) {\n                            if (squareStoredCreditCards.data.some(x => x.billing_address.postal_code === res.data.card.billing_address.postal_code && x.card_brand === res.data.card.card_brand && x.cardholder_name === res.data.card.cardholder_name && x.exp_month === res.data.card.exp_month && x.exp_year === res.data.card.exp_year && x.last_4 === res.data.card.last_4)) {\n                              matchedDuplicateCard = squareStoredCreditCards.data.filter(x => x.billing_address.postal_code === res.data.card.billing_address.postal_code && x.card_brand === res.data.card.card_brand && x.cardholder_name === res.data.card.cardholder_name && x.exp_month === res.data.card.exp_month && x.exp_year === res.data.card.exp_year && x.last_4 === res.data.card.last_4)[0];\n                              dispatch(ACTION_BOOKED_WITH_CARD_ID(matchedDuplicateCard.id));\n                            }\n                          }\n\n                          dispatch(ACTION_BOOKED_WITH_CARD_ID(res.data.card.id));\n                          updateUnsavedSquareCardIDs({\n                            variables: {\n                              unsavedSquareCardID: res.data.card.id,\n                              firstName: matchedClient.firstName,\n                              lastName: matchedClient.lastName,\n                              email: matchedClient.email\n                            }\n                          });\n                          getClientsRefetch();\n\n                        case 4:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x2) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()).catch(err => {\n                  console.error(err);\n                });\n\n              case 4:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5);\n        }));\n\n        return function returningClientSquarePostRequestFunction() {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n\n      matchedClient ? matchedClient.squareCustomerId ? returningClientSquarePostRequestFunction() : squarePostRequestFunction() : squarePostRequestFunction();\n    }\n  };\n\n  const createVerificationDetails = () => {\n    return {\n      amount: \"\",\n      currencyCode: \"\",\n      intent: \"STORE\",\n      billingContact: {\n        familyName: adminClientLastName,\n        givenName: adminClientFirstName,\n        email: adminClientEmail,\n        phone: adminClientPhoneNumber\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (successfulCardNonce) {\n      handleSubmitBooking();\n    }\n  }, [successfulCardNonce, handleSubmitBooking]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_square_payment_form_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SquarePaymentForm, {\n    sandbox: true,\n    applicationId: process.env.REACT_APP_SQUARE_SANDBOX_APPLICATION_ID,\n    locationId: process.env.REACT_APP_SQUARE_SANDBOX_LOCATION_ID,\n    cardNonceResponseReceived: cardNonceResponseReceived,\n    createVerificationDetails: createVerificationDetails,\n    inputStyles: [{\n      fontSize: \"24px\",\n      padding: \"14px\",\n      placeholderColor: \"#a0a0a0\",\n      backgroundColor: \"transparent\"\n    }, {\n      mediaMaxWidth: \"1800px\",\n      mediaMinWidth: \"1600px\",\n      fontSize: \"16px\"\n    }, {\n      mediaMinWidth: \"1801px\",\n      fontSize: \"24px\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_create_appointment_input_information_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 11\n    }\n  }, \"Choose a credit card\"), /*#__PURE__*/React.createElement(Dropdown, {\n    options: [{\n      value: JSON.stringify({\n        name: \"NEW CARD\",\n        id: \"NEW CARD\"\n      }),\n      label: \"NEW CARD\"\n    }, ...renderStoredCreditCardOptions()].flat(),\n    value: selectedCreditCard ? selectedCreditCard.name ? selectedCreditCard.name : \"\" : \"\",\n    onChange: item => {\n      const itemValue = JSON.parse(item.value);\n\n      if (selectedCreditCard.name) {\n        dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\n\n        if (itemValue.name === \"\" || itemValue.name === \"NEW CARD\") {\n          dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\n          changeSelectedCreditCard({\n            name: \"\",\n            id: \"\"\n          });\n          changeSelectedCreditCardFullData(\"\");\n        } else {\n          dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\n          changeSelectedCreditCard({\n            name: \"\",\n            id: \"\"\n          });\n          changeSelectedCreditCardFullData(\"\");\n          changeSelectedCreditCard({\n            name: itemValue.name,\n            id: itemValue.id\n          });\n          const cardFullData = squareStoredCreditCards.data.filter(x => x.id === selectedCreditCard.id)[0];\n          changeSelectedCreditCardFullData(cardFullData);\n        }\n      } else {\n        dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\n        changeSelectedCreditCard({\n          name: \"\",\n          id: \"\"\n        });\n        changeSelectedCreditCardFullData(\"\");\n        changeSelectedCreditCard({\n          name: itemValue.name,\n          id: itemValue.id\n        });\n        const cardFullData = squareStoredCreditCards ? squareStoredCreditCards.data ? squareStoredCreditCards.data.filter(x => x.id === selectedCreditCard.id)[0] : null : null;\n        changeSelectedCreditCardFullData(cardFullData);\n      }\n    },\n    controlClassName: \"sq-input\",\n    className: \"sq-creditcard\",\n    placeholder: adminClientFirstName && adminClientLastName ? \"NEW CARD\" : \"No client selected\",\n    disabled: adminClientFirstName && adminClientLastName ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_create_appointment_cardholder_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 11\n    }\n  }, \"Cardholder First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"sq-input\",\n    placeholder: \"Enter first name\",\n    value: selectedCreditCardFullData ? selectedCreditCardFullData.cardholder_name ? selectedCreditCardFullData.cardholder_name.split(\" \")[0] : cardHolderFirstName : cardHolderFirstName,\n    disabled: selectedCreditCardFullData ? true : false,\n    onChange: e => changeCardHolderFirstName(e.target.value.toUpperCase()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin_create_appointment_cardholder_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 11\n    }\n  }, \"Cardholder Last Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"sq-input\",\n    placeholder: \"Enter last name\",\n    value: selectedCreditCardFullData ? selectedCreditCardFullData.cardholder_name ? selectedCreditCardFullData.cardholder_name.split(\" \")[1] : cardHolderLastName : cardHolderLastName,\n    onChange: e => changeCardHolderLastName(e.target.value.toUpperCase()),\n    disabled: selectedCreditCardFullData ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 11\n    }\n  })), selectedCreditCardFullData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sq-selected-credit-card-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 15\n    }\n  }, \"Credit Card \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"credit_card\",\n    type: \"text\",\n    maxLength: \"100\",\n    className: \"sq-input\",\n    disabled: true,\n    value: selectedCreditCardFullData.card_brand.toLowerCase() === \"american_express\" ? \"•••• •••••• •\" + selectedCreditCardFullData.last_4 : \"•••• •••• •••• \" + selectedCreditCardFullData.last_4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 15\n    }\n  }, \"Expiration \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"expiration_date\",\n    type: \"text\",\n    className: \"sq-input\",\n    disabled: true,\n    value: selectedCreditCardFullData.exp_month >= 10 ? selectedCreditCardFullData.exp_month.toString() + \"/\" + selectedCreditCardFullData.exp_year.toString().substr(-2) : \"0\" + selectedCreditCardFullData.exp_month.toString() + \"/\" + selectedCreditCardFullData.exp_year.toString().substr(-2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 15\n    }\n  }, \"Zip Code \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"postal_code\",\n    type: \"text\",\n    className: \"sq-input\",\n    disabled: true,\n    value: selectedCreditCardFullData.billing_address.postal_code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sq-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 15\n    }\n  }, \"CVC \\xA0\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"cvc_code\",\n    type: \"text\",\n    className: \"sq-input\",\n    disabled: true,\n    value: selectedCreditCardFullData.card_brand.toLowerCase() === \"american_express\" ? \"••••\" : \"•••\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 15\n    }\n  }))) : null, /*#__PURE__*/React.createElement(CreditCardNumberInput, {\n    label: \"Credit Card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CreditCardExpirationDateInput, {\n    label: \"Expiration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CreditCardPostalCodeInput, {\n    label: \"Zip Code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CreditCardCVVInput, {\n    label: \"CVC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CreditCardSubmitButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }\n  }, \"Book Appointment\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sq-error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }\n  }, errorMessages.map(errorMessage => /*#__PURE__*/React.createElement(\"li\", {\n    key: \"sq-error-\".concat(errorMessage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 11\n    }\n  }, errorMessage))));\n};\n\nexport default AdminPaymentInfo;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/components/admin/AdminSchedule/AdminCreateAppointment/AdminPaymentInfo/AdminPaymentInfo.js"],"names":["React","useState","useCallback","useEffect","useMemo","SquarePaymentForm","CreditCardNumberInput","CreditCardExpirationDateInput","CreditCardPostalCodeInput","CreditCardCVVInput","CreditCardSubmitButton","Dropdown","useSelector","useDispatch","axios","useMutation","updateClientSquareIDMutation","updateUnsavedSquareCardIDsMutation","ACTION_BOOKED_WITH_CARD_ID_RESET","ACTION_SQUARE_CUSTOMER_ID","ACTION_BOOKED_WITH_CARD_ID","AdminPaymentInfo","props","getClientsData","getClientsRefetch","handleSubmitBooking","dispatch","errorMessages","changeErrorMessage","cardHolderFirstName","changeCardHolderFirstName","cardHolderLastName","changeCardHolderLastName","squareStoredCreditCards","changeSquareStoredCreditCards","name","id","selectedCreditCard","changeSelectedCreditCard","selectedCreditCardFullData","changeSelectedCreditCardFullData","successfulCardNonce","changeSuccessfulCardNonce","selectedClient","changeSelectedClient","adminClientFirstName","state","admin_client_first_name","adminClientLastName","admin_client_last_name","adminClientEmail","admin_client_email","adminClientPhoneNumber","admin_client_phone_number","bookedWithCardID","booked_with_card_id","updateUnsavedSquareCardIDs","updateClientSquareID","length","creditCardSplitArr","split","fullData","data","find","x","card_brand","replace","trim","last_4","iFrameLabel","document","getElementsByClassName","filter","innerText","iFrameLabelHidden","className","includes","getElementById","classList","add","forEach","remove","clients","i","firstName","toLowerCase","lastName","email","phoneNumber","retrieveSquareCustomerFunction","post","squareCustomerId","headers","Authorization","process","env","REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN","catch","e","cardFullData","join","fetchData","customerData","renderStoredCreditCardOptions","unsavedSquareCardIDs","map","value","JSON","stringify","label","cardNonceResponseReceived","errors","nonce","cardData","buyerVerificationToken","error","message","matchedClient","squareCustomerData","family_name","given_name","email_address","phone_number","squarePostRequestFunction","then","res","squareData","card_nonce","billing_address","postal_code","billing_postal_code","cardholder_name","verification_token","customerId","parse","request","response","customer","variables","unsavedSquareCardID","some","card","exp_month","exp_year","matchedDuplicateCard","err","console","returningClientSquarePostRequestFunction","createVerificationDetails","amount","currencyCode","intent","billingContact","familyName","givenName","phone","REACT_APP_SQUARE_SANDBOX_APPLICATION_ID","REACT_APP_SQUARE_SANDBOX_LOCATION_ID","fontSize","padding","placeholderColor","backgroundColor","mediaMaxWidth","mediaMinWidth","flat","item","itemValue","target","toUpperCase","toString","substr","errorMessage"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from \"react\";\r\nimport {\r\n  SquarePaymentForm,\r\n  CreditCardNumberInput,\r\n  CreditCardExpirationDateInput,\r\n  CreditCardPostalCodeInput,\r\n  CreditCardCVVInput,\r\n  CreditCardSubmitButton,\r\n} from \"react-square-payment-form\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport updateClientSquareIDMutation from \"../../../../../graphql/mutations/updateClientSquareIDMutation\";\r\nimport updateUnsavedSquareCardIDsMutation from \"../../../../../graphql/mutations/updateUnsavedSquareCardIDsMutation\";\r\nimport ACTION_BOOKED_WITH_CARD_ID_RESET from \"../../../../../actions/PaymentInfo/BookedWithCardID/ACTION_BOOKED_WITH_CARD_ID_RESET\";\r\nimport ACTION_SQUARE_CUSTOMER_ID from \"../../../../../actions/PaymentInfo/SquareCustomerID/ACTION_SQUARE_CUSTOMER_ID\";\r\nimport ACTION_BOOKED_WITH_CARD_ID from \"../../../../../actions/PaymentInfo/BookedWithCardID/ACTION_BOOKED_WITH_CARD_ID\";\r\nimport \"./AdminPaymentInfo.css\";\r\n\r\nconst AdminPaymentInfo = (props) => {\r\n  const { getClientsData, getClientsRefetch, handleSubmitBooking } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [errorMessages, changeErrorMessage] = useState([]);\r\n  const [cardHolderFirstName, changeCardHolderFirstName] = useState(\"\");\r\n  const [cardHolderLastName, changeCardHolderLastName] = useState(\"\");\r\n  const [squareStoredCreditCards, changeSquareStoredCreditCards] = useState(\"\");\r\n  const [selectedCreditCard, changeSelectedCreditCard] = useState({\r\n    name: \"\",\r\n    id: \"\",\r\n  });\r\n  const [\r\n    selectedCreditCardFullData,\r\n    changeSelectedCreditCardFullData,\r\n  ] = useState(\"\");\r\n  const [successfulCardNonce, changeSuccessfulCardNonce] = useState(false);\r\n  const [selectedClient, changeSelectedClient] = useState(\"\");\r\n\r\n  const adminClientFirstName = useSelector(\r\n    (state) => state.adminClientFirstName.admin_client_first_name\r\n  );\r\n  const adminClientLastName = useSelector(\r\n    (state) => state.adminClientLastName.admin_client_last_name\r\n  );\r\n  const adminClientEmail = useSelector(\r\n    (state) => state.adminClientEmail.admin_client_email\r\n  );\r\n  const adminClientPhoneNumber = useSelector(\r\n    (state) => state.adminClientPhoneNumber.admin_client_phone_number\r\n  );\r\n  const bookedWithCardID = useSelector(\r\n    (state) => state.bookedWithCardID.booked_with_card_id\r\n  );\r\n\r\n  const [updateUnsavedSquareCardIDs] = useMutation(\r\n    updateUnsavedSquareCardIDsMutation\r\n  );\r\n\r\n  const [updateClientSquareID] = useMutation(updateClientSquareIDMutation);\r\n\r\n  useEffect(() => {\r\n    if (selectedClient.length < 1) {\r\n      changeSelectedCreditCardFullData(\"\");\r\n      changeSelectedCreditCard({\r\n        name: \"\",\r\n        id: \"\",\r\n      });\r\n      changeSquareStoredCreditCards(\"\");\r\n    }\r\n  }, [selectedClient.length]);\r\n\r\n  useEffect(() => {\r\n    if (squareStoredCreditCards) {\r\n      if (\r\n        selectedCreditCard &&\r\n        selectedCreditCard.name &&\r\n        selectedCreditCard.id\r\n      ) {\r\n        const creditCardSplitArr = selectedCreditCard.name.split(\" -\");\r\n\r\n        const fullData = squareStoredCreditCards.data.find((x) => {\r\n          return (\r\n            x.card_brand === creditCardSplitArr[0].replace(\" \", \"_\").trim() &&\r\n            x.last_4 ===\r\n              creditCardSplitArr[creditCardSplitArr.length - 1].trim() &&\r\n            x.id === selectedCreditCard.id\r\n          );\r\n        });\r\n\r\n        if (fullData) {\r\n          changeSelectedCreditCardFullData(fullData);\r\n        }\r\n      }\r\n    }\r\n  }, [selectedCreditCard, squareStoredCreditCards]);\r\n\r\n  useEffect(() => {\r\n    const iFrameLabel = [...document.getElementsByClassName(\"sq-label\")].filter(\r\n      (x) =>\r\n        x.innerText === \"Credit Card\" ||\r\n        x.innerText === \"Expiration\" ||\r\n        x.innerText === \"Zip Code\" ||\r\n        x.innerText === \"CVC\"\r\n    );\r\n\r\n    const iFrameLabelHidden = [\r\n      ...document.getElementsByClassName(\"sq-label\"),\r\n    ].filter((x) => x.className.includes(\"sq-payment-form-hidden\"));\r\n\r\n    if (selectedCreditCardFullData) {\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-card-number\")\r\n        .classList.add(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-expiration-date\")\r\n        .classList.add(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-postal-code\")\r\n        .classList.add(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-cvv\")\r\n        .classList.add(\"sq-payment-form-hidden\");\r\n\r\n      if (iFrameLabel) {\r\n        if (iFrameLabel.length > 0) {\r\n          iFrameLabel.forEach((x) => x.classList.add(\"sq-payment-form-hidden\"));\r\n        }\r\n      }\r\n    } else {\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-card-number\")\r\n        .classList.remove(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-expiration-date\")\r\n        .classList.remove(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-postal-code\")\r\n        .classList.remove(\"sq-payment-form-hidden\");\r\n      document\r\n        .getElementById(\"sq-payment-form-sq-cvv\")\r\n        .classList.remove(\"sq-payment-form-hidden\");\r\n\r\n      if (iFrameLabelHidden) {\r\n        if (iFrameLabelHidden.length > 0) {\r\n          iFrameLabelHidden.forEach((x) => {\r\n            x.classList.remove(\"sq-payment-form-hidden\");\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [selectedCreditCardFullData]);\r\n\r\n  useEffect(() => {\r\n    if (getClientsData) {\r\n      if (getClientsData.clients) {\r\n        changeSelectedClient(\r\n          getClientsData.clients.filter((x, i) => {\r\n            return (\r\n              x.firstName.toLowerCase() ===\r\n                adminClientFirstName.toLowerCase() &&\r\n              x.lastName.toLowerCase() === adminClientLastName.toLowerCase() &&\r\n              x.email.toLowerCase() === adminClientEmail.toLowerCase() &&\r\n              x.phoneNumber.toLowerCase() ===\r\n                adminClientPhoneNumber.toLowerCase()\r\n            );\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    adminClientLastName,\r\n    adminClientFirstName,\r\n    adminClientEmail,\r\n    adminClientPhoneNumber,\r\n    getClientsData,\r\n  ]);\r\n\r\n  const retrieveSquareCustomerFunction = useCallback(async () => {\r\n    return await axios\r\n      .post(\r\n        \"http://localhost:4000/retrieve_customer\",\r\n        {\r\n          data: {\r\n            squareCustomerId:\r\n              selectedClient.length > 0\r\n                ? selectedClient[0].squareCustomerId\r\n                : \"\",\r\n          },\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization:\r\n              \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN,\r\n          },\r\n        }\r\n      )\r\n      .catch((e) => changeSquareStoredCreditCards(\"\"));\r\n  }, [selectedClient]);\r\n\r\n  useEffect(() => {\r\n    if (squareStoredCreditCards) {\r\n      const cardFullData = squareStoredCreditCards.data.filter(\r\n        (x) => x.id === selectedCreditCard.id\r\n      )[0];\r\n\r\n      if (!selectedCreditCard.name) {\r\n        if (cardFullData) {\r\n          changeSelectedCreditCard({\r\n            name:\r\n              cardFullData.card_brand.split(\"_\").join(\" \") +\r\n              \" - \" +\r\n              cardFullData.last_4,\r\n            id: cardFullData.id,\r\n          });\r\n\r\n          changeSelectedCreditCardFullData(cardFullData);\r\n        }\r\n      }\r\n    }\r\n  }, [bookedWithCardID, squareStoredCreditCards, selectedCreditCard]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    const customerData = await retrieveSquareCustomerFunction();\r\n\r\n    changeSquareStoredCreditCards(customerData);\r\n  }, [retrieveSquareCustomerFunction]);\r\n\r\n  useMemo(() => {\r\n    if (selectedClient.length > 0) {\r\n      if (selectedClient[0].squareCustomerId) {\r\n        fetchData();\r\n      } else {\r\n        changeSquareStoredCreditCards(\"\");\r\n      }\r\n    } else {\r\n      if (selectedClient.length === 0) {\r\n        changeSquareStoredCreditCards(\"\");\r\n      }\r\n    }\r\n  }, [selectedClient, fetchData]);\r\n\r\n  const renderStoredCreditCardOptions = () => {\r\n    if (squareStoredCreditCards) {\r\n      if (squareStoredCreditCards.data) {\r\n        return squareStoredCreditCards.data\r\n          .filter((x) =>\r\n            selectedClient.length > 0\r\n              ? selectedClient[0].unsavedSquareCardIDs.includes(x.id)\r\n              : \"\"\r\n          )\r\n          .map((x, i) => {\r\n            return {\r\n              value: JSON.stringify({\r\n                name: x.card_brand.split(\"_\").join(\" \") + \" - \" + x.last_4,\r\n                id: x.id,\r\n              }),\r\n              label: x.card_brand.split(\"_\").join(\" \") + \" - \" + x.last_4,\r\n            };\r\n          });\r\n      } else {\r\n        return [\r\n          {\r\n            value: JSON.stringify({\r\n              name: \"\",\r\n              id: \"\",\r\n            }),\r\n            label: \"No cards saved on file\",\r\n          },\r\n        ];\r\n      }\r\n    } else {\r\n      return [\r\n        {\r\n          value: JSON.stringify({\r\n            name: \"\",\r\n            id: \"\",\r\n          }),\r\n          label: \"No cards saved on file\",\r\n        },\r\n      ];\r\n    }\r\n  };\r\n\r\n  const cardNonceResponseReceived = (\r\n    errors,\r\n    nonce,\r\n    cardData,\r\n    buyerVerificationToken\r\n  ) => {\r\n    if (errors[0] !== null) {\r\n      return changeErrorMessage(\r\n        errors.map((error) => (error ? error.message : null))\r\n      );\r\n    } else {\r\n      changeErrorMessage([]);\r\n\r\n      let matchedClient;\r\n\r\n      if (getClientsData) {\r\n        for (let i = 0; i < getClientsData.clients.length; i++) {\r\n          if (getClientsData.clients[i].email === adminClientEmail) {\r\n            matchedClient = getClientsData.clients[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      const squareCustomerData = {\r\n        family_name: adminClientFirstName,\r\n        given_name: adminClientLastName,\r\n        email_address: adminClientEmail,\r\n        phone_number: adminClientPhoneNumber,\r\n      };\r\n\r\n      const squarePostRequestFunction = () => {\r\n        axios\r\n          .post(\"http://localhost:4000/customers\", squareCustomerData, {\r\n            headers: {\r\n              Authorization:\r\n                \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN,\r\n            },\r\n          })\r\n          .then((res) => {\r\n            const squareData = {\r\n              card_nonce: nonce,\r\n              billing_address: { postal_code: cardData.billing_postal_code },\r\n              cardholder_name:\r\n                (cardHolderFirstName\r\n                  ? cardHolderFirstName\r\n                  : adminClientFirstName\r\n                ).trim() +\r\n                \" \" +\r\n                (cardHolderLastName\r\n                  ? cardHolderLastName\r\n                  : adminClientLastName\r\n                ).trim(),\r\n              verification_token: buyerVerificationToken,\r\n              customerId: JSON.parse(res.request.response).customer.id,\r\n            };\r\n\r\n            if (matchedClient) {\r\n              if (!matchedClient.squareCustomerId) {\r\n                updateClientSquareID({\r\n                  variables: {\r\n                    squareCustomerId: JSON.parse(res.request.response).customer\r\n                      .id,\r\n                    firstName: adminClientFirstName,\r\n                    lastName: adminClientLastName,\r\n                    email: adminClientEmail,\r\n                  },\r\n                });\r\n\r\n                getClientsRefetch();\r\n              }\r\n            } else {\r\n              dispatch(\r\n                ACTION_SQUARE_CUSTOMER_ID(\r\n                  JSON.parse(res.request.response).customer.id\r\n                )\r\n              );\r\n            }\r\n\r\n            changeSuccessfulCardNonce(true);\r\n\r\n            updateUnsavedSquareCardIDs({\r\n              variables: {\r\n                unsavedSquareCardID: cardData.id,\r\n                firstName: adminClientFirstName,\r\n                lastName: adminClientLastName,\r\n                email: adminClientEmail,\r\n              },\r\n            });\r\n\r\n            getClientsRefetch();\r\n\r\n            return axios.post(\r\n              \"http://localhost:4000/customers/card\",\r\n              squareData,\r\n              {\r\n                headers: {\r\n                  Authorization:\r\n                    \"Bearer \" +\r\n                    process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN,\r\n                },\r\n              }\r\n            );\r\n          })\r\n          .then(async (res) => {\r\n            if (squareStoredCreditCards.data) {\r\n              if (\r\n                squareStoredCreditCards.data.some(\r\n                  (x) =>\r\n                    x.billing_address.postal_code ===\r\n                      res.data.card.billing_address.postal_code &&\r\n                    x.card_brand === res.data.card.card_brand &&\r\n                    x.cardholder_name === res.data.card.cardholder_name &&\r\n                    x.exp_month === res.data.card.exp_month &&\r\n                    x.exp_year === res.data.card.exp_year &&\r\n                    x.last_4 === res.data.card.last_4\r\n                )\r\n              ) {\r\n                const matchedDuplicateCard = squareStoredCreditCards.data.filter(\r\n                  (x) =>\r\n                    x.billing_address.postal_code ===\r\n                      res.data.card.billing_address.postal_code &&\r\n                    x.card_brand === res.data.card.card_brand &&\r\n                    x.cardholder_name === res.data.card.cardholder_name &&\r\n                    x.exp_month === res.data.card.exp_month &&\r\n                    x.exp_year === res.data.card.exp_year &&\r\n                    x.last_4 === res.data.card.last_4\r\n                )[0];\r\n\r\n                dispatch(ACTION_BOOKED_WITH_CARD_ID(matchedDuplicateCard.id));\r\n              }\r\n            }\r\n\r\n            dispatch(ACTION_BOOKED_WITH_CARD_ID(res.data.card.id));\r\n\r\n            updateUnsavedSquareCardIDs({\r\n              variables: {\r\n                unsavedSquareCardID: res.data.card.id,\r\n                firstName: adminClientFirstName,\r\n                lastName: adminClientLastName,\r\n                email: adminClientEmail,\r\n              },\r\n            });\r\n\r\n            getClientsRefetch();\r\n          })\r\n          .catch((err) => {\r\n            console.error(err);\r\n          });\r\n      };\r\n\r\n      const returningClientSquarePostRequestFunction = async () => {\r\n        const squareData = {\r\n          card_nonce: nonce,\r\n          billing_address: { postal_code: cardData.billing_postal_code },\r\n          cardholder_name:\r\n            (cardHolderFirstName\r\n              ? cardHolderFirstName\r\n              : adminClientFirstName\r\n            ).trim() +\r\n            \" \" +\r\n            (cardHolderLastName\r\n              ? cardHolderLastName\r\n              : adminClientLastName\r\n            ).trim(),\r\n          verification_token: buyerVerificationToken,\r\n          customerId: matchedClient.squareCustomerId,\r\n        };\r\n\r\n        changeSuccessfulCardNonce(true);\r\n\r\n        return await axios\r\n          .post(\"http://localhost:4000/customers/card\", squareData, {\r\n            headers: {\r\n              Authorization:\r\n                \"Bearer \" + process.env.REACT_APP_SQUARE_SANDBOX_ACCESS_TOKEN,\r\n            },\r\n          })\r\n          .then(async (res) => {\r\n            if (squareStoredCreditCards.data) {\r\n              if (\r\n                squareStoredCreditCards.data.some(\r\n                  (x) =>\r\n                    x.billing_address.postal_code ===\r\n                      res.data.card.billing_address.postal_code &&\r\n                    x.card_brand === res.data.card.card_brand &&\r\n                    x.cardholder_name === res.data.card.cardholder_name &&\r\n                    x.exp_month === res.data.card.exp_month &&\r\n                    x.exp_year === res.data.card.exp_year &&\r\n                    x.last_4 === res.data.card.last_4\r\n                )\r\n              ) {\r\n                const matchedDuplicateCard = squareStoredCreditCards.data.filter(\r\n                  (x) =>\r\n                    x.billing_address.postal_code ===\r\n                      res.data.card.billing_address.postal_code &&\r\n                    x.card_brand === res.data.card.card_brand &&\r\n                    x.cardholder_name === res.data.card.cardholder_name &&\r\n                    x.exp_month === res.data.card.exp_month &&\r\n                    x.exp_year === res.data.card.exp_year &&\r\n                    x.last_4 === res.data.card.last_4\r\n                )[0];\r\n\r\n                dispatch(ACTION_BOOKED_WITH_CARD_ID(matchedDuplicateCard.id));\r\n              }\r\n            }\r\n\r\n            dispatch(ACTION_BOOKED_WITH_CARD_ID(res.data.card.id));\r\n\r\n            updateUnsavedSquareCardIDs({\r\n              variables: {\r\n                unsavedSquareCardID: res.data.card.id,\r\n                firstName: matchedClient.firstName,\r\n                lastName: matchedClient.lastName,\r\n                email: matchedClient.email,\r\n              },\r\n            });\r\n\r\n            getClientsRefetch();\r\n          })\r\n          .catch((err) => {\r\n            console.error(err);\r\n          });\r\n      };\r\n\r\n      matchedClient\r\n        ? matchedClient.squareCustomerId\r\n          ? returningClientSquarePostRequestFunction()\r\n          : squarePostRequestFunction()\r\n        : squarePostRequestFunction();\r\n    }\r\n  };\r\n\r\n  const createVerificationDetails = () => {\r\n    return {\r\n      amount: \"\",\r\n      currencyCode: \"\",\r\n      intent: \"STORE\",\r\n      billingContact: {\r\n        familyName: adminClientLastName,\r\n        givenName: adminClientFirstName,\r\n        email: adminClientEmail,\r\n        phone: adminClientPhoneNumber,\r\n      },\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (successfulCardNonce) {\r\n      handleSubmitBooking();\r\n    }\r\n  }, [successfulCardNonce, handleSubmitBooking]);\r\n\r\n  return (\r\n    <div className=\"admin_square_payment_form_container\">\r\n      <SquarePaymentForm\r\n        sandbox={true}\r\n        applicationId={process.env.REACT_APP_SQUARE_SANDBOX_APPLICATION_ID}\r\n        locationId={process.env.REACT_APP_SQUARE_SANDBOX_LOCATION_ID}\r\n        cardNonceResponseReceived={cardNonceResponseReceived}\r\n        createVerificationDetails={createVerificationDetails}\r\n        inputStyles={[\r\n          {\r\n            fontSize: \"24px\",\r\n            padding: \"14px\",\r\n            placeholderColor: \"#a0a0a0\",\r\n            backgroundColor: \"transparent\",\r\n          },\r\n          {\r\n            mediaMaxWidth: \"1800px\",\r\n            mediaMinWidth: \"1600px\",\r\n            fontSize: \"16px\",\r\n          },\r\n          {\r\n            mediaMinWidth: \"1801px\",\r\n            fontSize: \"24px\",\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"admin_create_appointment_input_information_container\">\r\n          <div className=\"sq-label\">Choose a credit card</div>\r\n          <Dropdown\r\n            options={[\r\n              {\r\n                value: JSON.stringify({\r\n                  name: \"NEW CARD\",\r\n                  id: \"NEW CARD\",\r\n                }),\r\n                label: \"NEW CARD\",\r\n              },\r\n              ...renderStoredCreditCardOptions(),\r\n            ].flat()}\r\n            value={\r\n              selectedCreditCard\r\n                ? selectedCreditCard.name\r\n                  ? selectedCreditCard.name\r\n                  : \"\"\r\n                : \"\"\r\n            }\r\n            onChange={(item) => {\r\n              const itemValue = JSON.parse(item.value);\r\n\r\n              if (selectedCreditCard.name) {\r\n                dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\r\n\r\n                if (itemValue.name === \"\" || itemValue.name === \"NEW CARD\") {\r\n                  dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\r\n\r\n                  changeSelectedCreditCard({ name: \"\", id: \"\" });\r\n                  changeSelectedCreditCardFullData(\"\");\r\n                } else {\r\n                  dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\r\n\r\n                  changeSelectedCreditCard({ name: \"\", id: \"\" });\r\n                  changeSelectedCreditCardFullData(\"\");\r\n\r\n                  changeSelectedCreditCard({\r\n                    name: itemValue.name,\r\n                    id: itemValue.id,\r\n                  });\r\n\r\n                  const cardFullData = squareStoredCreditCards.data.filter(\r\n                    (x) => x.id === selectedCreditCard.id\r\n                  )[0];\r\n\r\n                  changeSelectedCreditCardFullData(cardFullData);\r\n                }\r\n              } else {\r\n                dispatch(ACTION_BOOKED_WITH_CARD_ID_RESET());\r\n\r\n                changeSelectedCreditCard({ name: \"\", id: \"\" });\r\n                changeSelectedCreditCardFullData(\"\");\r\n\r\n                changeSelectedCreditCard({\r\n                  name: itemValue.name,\r\n                  id: itemValue.id,\r\n                });\r\n\r\n                const cardFullData = squareStoredCreditCards\r\n                  ? squareStoredCreditCards.data\r\n                    ? squareStoredCreditCards.data.filter(\r\n                        (x) => x.id === selectedCreditCard.id\r\n                      )[0]\r\n                    : null\r\n                  : null;\r\n\r\n                changeSelectedCreditCardFullData(cardFullData);\r\n              }\r\n            }}\r\n            controlClassName=\"sq-input\"\r\n            className=\"sq-creditcard\"\r\n            placeholder={\r\n              adminClientFirstName && adminClientLastName\r\n                ? \"NEW CARD\"\r\n                : \"No client selected\"\r\n            }\r\n            disabled={\r\n              adminClientFirstName && adminClientLastName ? false : true\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"admin_create_appointment_cardholder_container\">\r\n          <span className=\"sq-label\">Cardholder First Name</span>\r\n          <input\r\n            className=\"sq-input\"\r\n            placeholder=\"Enter first name\"\r\n            value={\r\n              selectedCreditCardFullData\r\n                ? selectedCreditCardFullData.cardholder_name\r\n                  ? selectedCreditCardFullData.cardholder_name.split(\" \")[0]\r\n                  : cardHolderFirstName\r\n                : cardHolderFirstName\r\n            }\r\n            disabled={selectedCreditCardFullData ? true : false}\r\n            onChange={(e) =>\r\n              changeCardHolderFirstName(e.target.value.toUpperCase())\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"admin_create_appointment_cardholder_container\">\r\n          <span className=\"sq-label\">Cardholder Last Name</span>\r\n          <input\r\n            className=\"sq-input\"\r\n            placeholder=\"Enter last name\"\r\n            value={\r\n              selectedCreditCardFullData\r\n                ? selectedCreditCardFullData.cardholder_name\r\n                  ? selectedCreditCardFullData.cardholder_name.split(\" \")[1]\r\n                  : cardHolderLastName\r\n                : cardHolderLastName\r\n            }\r\n            onChange={(e) =>\r\n              changeCardHolderLastName(e.target.value.toUpperCase())\r\n            }\r\n            disabled={selectedCreditCardFullData ? true : false}\r\n          />\r\n        </div>\r\n        {selectedCreditCardFullData ? (\r\n          <>\r\n            <div className=\"sq-selected-credit-card-details\">\r\n              {/* Space in \"Credit Card \" important to distinguish between new card and toggled card form inputs */}\r\n              <span className=\"sq-label\">Credit Card &nbsp;</span>\r\n              <input\r\n                name=\"credit_card\"\r\n                type=\"text\"\r\n                maxLength=\"100\"\r\n                className=\"sq-input\"\r\n                disabled={true}\r\n                value={\r\n                  selectedCreditCardFullData.card_brand.toLowerCase() ===\r\n                  \"american_express\"\r\n                    ? \"•••• •••••• •\" + selectedCreditCardFullData.last_4\r\n                    : \"•••• •••• •••• \" + selectedCreditCardFullData.last_4\r\n                }\r\n              />\r\n            </div>\r\n            <div>\r\n              {/* Space in \"Expiration \" important to distinguish between new card and toggled card form inputs */}\r\n              <span className=\"sq-label\">Expiration &nbsp;</span>\r\n              <input\r\n                name=\"expiration_date\"\r\n                type=\"text\"\r\n                className=\"sq-input\"\r\n                disabled={true}\r\n                value={\r\n                  selectedCreditCardFullData.exp_month >= 10\r\n                    ? selectedCreditCardFullData.exp_month.toString() +\r\n                      \"/\" +\r\n                      selectedCreditCardFullData.exp_year.toString().substr(-2)\r\n                    : \"0\" +\r\n                      selectedCreditCardFullData.exp_month.toString() +\r\n                      \"/\" +\r\n                      selectedCreditCardFullData.exp_year.toString().substr(-2)\r\n                }\r\n              />\r\n            </div>\r\n            <div>\r\n              {/* Space in \"Zip Code \" important to distinguish between new card and toggled card form inputs */}\r\n              <span className=\"sq-label\">Zip Code &nbsp;</span>\r\n              <input\r\n                name=\"postal_code\"\r\n                type=\"text\"\r\n                className=\"sq-input\"\r\n                disabled={true}\r\n                value={selectedCreditCardFullData.billing_address.postal_code}\r\n              />\r\n            </div>\r\n            <div>\r\n              {/* Space in \"CVC \" important to distinguish between new card and toggled card form inputs */}\r\n              <span className=\"sq-label\">CVC &nbsp;</span>\r\n              <input\r\n                name=\"cvc_code\"\r\n                type=\"text\"\r\n                className=\"sq-input\"\r\n                disabled={true}\r\n                value={\r\n                  selectedCreditCardFullData.card_brand.toLowerCase() ===\r\n                  \"american_express\"\r\n                    ? \"••••\"\r\n                    : \"•••\"\r\n                }\r\n              />\r\n            </div>\r\n          </>\r\n        ) : null}\r\n\r\n        <CreditCardNumberInput label=\"Credit Card\" />\r\n        <CreditCardExpirationDateInput label=\"Expiration\" />\r\n        <CreditCardPostalCodeInput label=\"Zip Code\" />\r\n        <CreditCardCVVInput label=\"CVC\" />\r\n        <CreditCardSubmitButton>Book Appointment</CreditCardSubmitButton>\r\n      </SquarePaymentForm>\r\n      <div className=\"sq-error-message\">\r\n        {errorMessages.map((errorMessage) => (\r\n          <li key={`sq-error-${errorMessage}`}>{errorMessage}</li>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPaymentInfo;\r\n"]},"metadata":{},"sourceType":"module"}