{"ast":null,"code":"import _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\HighEnd\\\\Client\\\\src\\\\components\\\\checkout\\\\Form\\\\Email.js\";\nimport React, { useState, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport getClientsQuery from \"../../../graphql/queries/getClientsQuery\";\nimport ACTION_EMAIL from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL\";\nimport ACTION_EMAIL_RESET from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL_RESET\";\nimport ACTION_EMAIL_NOT_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_NOT_INVALID\";\nimport ACTION_EMAIL_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_VALID\";\nimport ACTION_EMAIL_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_INVALID\";\nimport ACTION_EMAIL_NOT_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_NOT_VALID\";\nimport ACTION_BOOKING_SUMMARY_NOT_ACTIVE from \"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";\nimport \"../GuestCheckout.css\";\n\nconst Email = () => {\n  const dispatch = useDispatch(); // Email States\n\n  const email = useSelector(state => state.email.email);\n  const emailIsValid = useSelector(state => state.emailIsValid.email_valid);\n  const emailIsInvalid = useSelector(state => state.emailIsInvalid.email_invalid);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailAlreadyRegistered = _useState2[0],\n        changeEmailAlreadyRegistered = _useState2[1]; // Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\n\n\n  const emailReg = /^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;\n\n  const _useQuery = useQuery(getClientsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        data = _useQuery.data;\n\n  const validateEmail = e => {\n    const validEmail = emailReg.test(e.currentTarget.value);\n    const validatorTest = isEmail(e.currentTarget.value);\n    dispatch(ACTION_EMAIL(e.currentTarget.value.trim()));\n\n    if (!emailAlreadyRegistered) {\n      if (validEmail && validatorTest) {\n        dispatch(ACTION_EMAIL_NOT_INVALID());\n        dispatch(ACTION_EMAIL_VALID());\n      } else {\n        dispatch(ACTION_EMAIL_INVALID());\n        dispatch(ACTION_EMAIL_NOT_VALID());\n        dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n      }\n    } else {\n      dispatch(ACTION_EMAIL_INVALID());\n      dispatch(ACTION_EMAIL_NOT_VALID());\n      dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n    }\n  };\n\n  useMemo(() => {\n    if (email) {\n      if (data) {\n        for (let i = 0; i < data.clients.length; i++) {\n          if (data.clients[i].email === email) {\n            if (data.clients[i].password !== null || data.clients[i].tokenCount > 0) {\n              changeEmailAlreadyRegistered(true);\n              dispatch(ACTION_EMAIL_INVALID());\n              dispatch(ACTION_EMAIL_NOT_VALID());\n              dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n            }\n          }\n        }\n      }\n    }\n  }, [dispatch, data, email]);\n\n  const emailTyping = () => {\n    dispatch(ACTION_EMAIL_RESET());\n    changeEmailAlreadyRegistered(false);\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"guestEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"required_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"required_label red_asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }\n  }, \"* \"))), /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"email\",\n    defaultValue: email,\n    maxLength: 128,\n    placeholder: \"Email address\",\n    className: \"input_field\",\n    onChange: emailTyping,\n    onBlur: validateEmail,\n    invalid: email === \"\" ? false : emailIsInvalid ? true : false,\n    valid: email === \"\" ? false : emailIsValid ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), emailAlreadyRegistered ? /*#__PURE__*/React.createElement(FormFeedback, {\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"This email has already been registered.\") : /*#__PURE__*/React.createElement(FormFeedback, {\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Please enter a valid email address.\"));\n};\n\nexport default Email;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/components/checkout/Form/Email.js"],"names":["React","useState","useMemo","useDispatch","useSelector","FormGroup","FormFeedback","Label","Input","isEmail","useQuery","getClientsQuery","ACTION_EMAIL","ACTION_EMAIL_RESET","ACTION_EMAIL_NOT_INVALID","ACTION_EMAIL_VALID","ACTION_EMAIL_INVALID","ACTION_EMAIL_NOT_VALID","ACTION_BOOKING_SUMMARY_NOT_ACTIVE","Email","dispatch","email","state","emailIsValid","email_valid","emailIsInvalid","email_invalid","emailAlreadyRegistered","changeEmailAlreadyRegistered","emailReg","fetchPolicy","data","validateEmail","e","validEmail","test","currentTarget","value","validatorTest","trim","i","clients","length","password","tokenCount","emailTyping"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport getClientsQuery from \"../../../graphql/queries/getClientsQuery\";\r\nimport ACTION_EMAIL from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL\";\r\nimport ACTION_EMAIL_RESET from \"../../../actions/GuestCheckoutForm/Email/ACTION_EMAIL_RESET\";\r\nimport ACTION_EMAIL_NOT_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_NOT_INVALID\";\r\nimport ACTION_EMAIL_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_VALID\";\r\nimport ACTION_EMAIL_INVALID from \"../../../actions/EmailValidation/Invalid/ACTION_EMAIL_INVALID\";\r\nimport ACTION_EMAIL_NOT_VALID from \"../../../actions/EmailValidation/Valid/ACTION_EMAIL_NOT_VALID\";\r\nimport ACTION_BOOKING_SUMMARY_NOT_ACTIVE from \"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";\r\nimport \"../GuestCheckout.css\";\r\n\r\nconst Email = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Email States\r\n  const email = useSelector((state) => state.email.email);\r\n  const emailIsValid = useSelector((state) => state.emailIsValid.email_valid);\r\n  const emailIsInvalid = useSelector(\r\n    (state) => state.emailIsInvalid.email_invalid\r\n  );\r\n  const [emailAlreadyRegistered, changeEmailAlreadyRegistered] = useState(\r\n    false\r\n  );\r\n\r\n  // Regular Expression for Email Validation - allows only one @ and only one period while not allowing special characters or spaces\r\n  const emailReg = /^[^\\s@#!]+@{1}[^\\s@.#!]+\\.{1}[^\\s@.]+$/;\r\n\r\n  const { data } = useQuery(getClientsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const validateEmail = (e) => {\r\n    const validEmail = emailReg.test(e.currentTarget.value);\r\n    const validatorTest = isEmail(e.currentTarget.value);\r\n    dispatch(ACTION_EMAIL(e.currentTarget.value.trim()));\r\n\r\n    if (!emailAlreadyRegistered) {\r\n      if (validEmail && validatorTest) {\r\n        dispatch(ACTION_EMAIL_NOT_INVALID());\r\n        dispatch(ACTION_EMAIL_VALID());\r\n      } else {\r\n        dispatch(ACTION_EMAIL_INVALID());\r\n        dispatch(ACTION_EMAIL_NOT_VALID());\r\n        dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n      }\r\n    } else {\r\n      dispatch(ACTION_EMAIL_INVALID());\r\n      dispatch(ACTION_EMAIL_NOT_VALID());\r\n      dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n    }\r\n  };\r\n\r\n  useMemo(() => {\r\n    if (email) {\r\n      if (data) {\r\n        for (let i = 0; i < data.clients.length; i++) {\r\n          if (data.clients[i].email === email) {\r\n            if (\r\n              data.clients[i].password !== null ||\r\n              data.clients[i].tokenCount > 0\r\n            ) {\r\n              changeEmailAlreadyRegistered(true);\r\n              dispatch(ACTION_EMAIL_INVALID());\r\n              dispatch(ACTION_EMAIL_NOT_VALID());\r\n              dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [dispatch, data, email]);\r\n\r\n  const emailTyping = () => {\r\n    dispatch(ACTION_EMAIL_RESET());\r\n    changeEmailAlreadyRegistered(false);\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <Label for=\"guestEmail\">\r\n        <div className=\"required_label\">\r\n          Email<p className=\"required_label red_asterisk\">* </p>\r\n        </div>\r\n      </Label>\r\n      <Input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        defaultValue={email}\r\n        maxLength={128}\r\n        placeholder=\"Email address\"\r\n        className=\"input_field\"\r\n        onChange={emailTyping}\r\n        onBlur={validateEmail}\r\n        invalid={email === \"\" ? false : emailIsInvalid ? true : false}\r\n        valid={email === \"\" ? false : emailIsValid ? true : false}\r\n      />\r\n      {emailAlreadyRegistered ? (\r\n        <FormFeedback invalid=\"true\">\r\n          This email has already been registered.\r\n        </FormFeedback>\r\n      ) : (\r\n        <FormFeedback invalid=\"true\">\r\n          Please enter a valid email address.\r\n        </FormFeedback>\r\n      )}\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n"]},"metadata":{},"sourceType":"module"}