{"ast":null,"code":"import{SubscriptionClient}from\"subscriptions-transport-ws\";import{WebSocketLink}from\"apollo-link-ws\";import{getMainDefinition}from\"apollo-utilities\";import{ApolloClient,InMemoryCache,split,HttpLink}from\"@apollo/client\";const GRAPHQL_ENDPOINT=process.env.REACT_APP_ENV===\"production\"?\"wss://\".concat(process.env.REACT_APP_PRODUCTION_SERVER_ROOT,\"/graphql\"):\"ws://localhost:4000/graphql\";const client=new SubscriptionClient(GRAPHQL_ENDPOINT,{reconnect:true});const webSocketsLink=new WebSocketLink(client);const httpLink=new HttpLink({uri:process.env.REACT_APP_ENV===\"production\"?\"\".concat(process.env.REACT_APP_PRODUCTION_SERVER_URL,\"/graphql\"):\"http://localhost:4000/graphql\",credentials:\"include\"});const link=split(({query})=>{const definition=getMainDefinition(query);return definition.kind===\"OperationDefinition\"&&definition.operation===\"subscription\";},webSocketsLink,httpLink);const apolloClient=new ApolloClient({cache:new InMemoryCache(),link,onError:({graphQLErrors})=>{if(graphQLErrors){graphQLErrors.map(({message})=>console.log(message));}}});export default apolloClient;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/HighEnd/Client/src/apolloClient.js"],"names":["SubscriptionClient","WebSocketLink","getMainDefinition","ApolloClient","InMemoryCache","split","HttpLink","GRAPHQL_ENDPOINT","process","env","REACT_APP_ENV","REACT_APP_PRODUCTION_SERVER_ROOT","client","reconnect","webSocketsLink","httpLink","uri","REACT_APP_PRODUCTION_SERVER_URL","credentials","link","query","definition","kind","operation","apolloClient","cache","onError","graphQLErrors","map","message","console","log"],"mappings":"AAAA,OAASA,kBAAT,KAAmC,4BAAnC,CACA,OAASC,aAAT,KAA8B,gBAA9B,CACA,OAASC,iBAAT,KAAkC,kBAAlC,CACA,OAASC,YAAT,CAAuBC,aAAvB,CAAsCC,KAAtC,CAA6CC,QAA7C,KAA6D,gBAA7D,CAEA,KAAMC,CAAAA,gBAAgB,CACpBC,OAAO,CAACC,GAAR,CAAYC,aAAZ,GAA8B,YAA9B,iBACaF,OAAO,CAACC,GAAR,CAAYE,gCADzB,aAEI,6BAHN,CAKA,KAAMC,CAAAA,MAAM,CAAG,GAAIZ,CAAAA,kBAAJ,CAAuBO,gBAAvB,CAAyC,CACtDM,SAAS,CAAE,IAD2C,CAAzC,CAAf,CAIA,KAAMC,CAAAA,cAAc,CAAG,GAAIb,CAAAA,aAAJ,CAAkBW,MAAlB,CAAvB,CAEA,KAAMG,CAAAA,QAAQ,CAAG,GAAIT,CAAAA,QAAJ,CAAa,CAC5BU,GAAG,CACDR,OAAO,CAACC,GAAR,CAAYC,aAAZ,GAA8B,YAA9B,WACOF,OAAO,CAACC,GAAR,CAAYQ,+BADnB,aAEI,+BAJsB,CAK5BC,WAAW,CAAE,SALe,CAAb,CAAjB,CAQA,KAAMC,CAAAA,IAAI,CAAGd,KAAK,CAChB,CAAC,CAAEe,KAAF,CAAD,GAAe,CACb,KAAMC,CAAAA,UAAU,CAAGnB,iBAAiB,CAACkB,KAAD,CAApC,CACA,MACEC,CAAAA,UAAU,CAACC,IAAX,GAAoB,qBAApB,EACAD,UAAU,CAACE,SAAX,GAAyB,cAF3B,CAID,CAPe,CAQhBT,cARgB,CAShBC,QATgB,CAAlB,CAYA,KAAMS,CAAAA,YAAY,CAAG,GAAIrB,CAAAA,YAAJ,CAAiB,CACpCsB,KAAK,CAAE,GAAIrB,CAAAA,aAAJ,EAD6B,CAEpCe,IAFoC,CAGpCO,OAAO,CAAE,CAAC,CAAEC,aAAF,CAAD,GAAuB,CAC9B,GAAIA,aAAJ,CAAmB,CACjBA,aAAa,CAACC,GAAd,CAAkB,CAAC,CAAEC,OAAF,CAAD,GAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC,EACD,CACF,CAPmC,CAAjB,CAArB,CAUA,cAAeL,CAAAA,YAAf","sourcesContent":["import { SubscriptionClient } from \"subscriptions-transport-ws\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { ApolloClient, InMemoryCache, split, HttpLink } from \"@apollo/client\";\r\n\r\nconst GRAPHQL_ENDPOINT =\r\n  process.env.REACT_APP_ENV === \"production\"\r\n    ? `wss://${process.env.REACT_APP_PRODUCTION_SERVER_ROOT}/graphql`\r\n    : \"ws://localhost:4000/graphql\";\r\n\r\nconst client = new SubscriptionClient(GRAPHQL_ENDPOINT, {\r\n  reconnect: true,\r\n});\r\n\r\nconst webSocketsLink = new WebSocketLink(client);\r\n\r\nconst httpLink = new HttpLink({\r\n  uri:\r\n    process.env.REACT_APP_ENV === \"production\"\r\n      ? `${process.env.REACT_APP_PRODUCTION_SERVER_URL}/graphql`\r\n      : \"http://localhost:4000/graphql\",\r\n  credentials: \"include\",\r\n});\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  webSocketsLink,\r\n  httpLink\r\n);\r\n\r\nconst apolloClient = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link,\r\n  onError: ({ graphQLErrors }) => {\r\n    if (graphQLErrors) {\r\n      graphQLErrors.map(({ message }) => console.log(message));\r\n    }\r\n  },\r\n});\r\n\r\nexport default apolloClient;\r\n"]},"metadata":{},"sourceType":"module"}