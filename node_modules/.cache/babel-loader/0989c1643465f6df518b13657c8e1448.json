{"ast":null,"code":"import _slicedToArray from \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\HighEnd\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\WebProjects\\\\Barbershops\\\\MERN-barberShops\\\\HighEnd\\\\Client\\\\src\\\\components\\\\checkout\\\\Form\\\\PhoneNumber.js\";\nimport React, { useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport getClientsQuery from \"../../../graphql/queries/getClientsQuery\";\nimport ACTION_PHONE_NUMBER_RESET from \"../../../actions/GuestCheckoutForm/PhoneNumber/ACTION_PHONE_NUMBER_RESET\";\nimport ACTION_PHONE_NUMBER from \"../../../actions/GuestCheckoutForm/PhoneNumber/ACTION_PHONE_NUMBER\";\nimport ACTION_PHONE_VALID from \"../../../actions/PhoneNumberValidation/Valid/ACTION_PHONE_VALID\";\nimport ACTION_PHONE_NOT_INVALID from \"../../../actions/PhoneNumberValidation/Invalid/ACTION_PHONE_NOT_INVALID\";\nimport ACTION_PHONE_NOT_VALID from \"../../../actions/PhoneNumberValidation/Valid/ACTION_PHONE_NOT_VALID\";\nimport ACTION_PHONE_INVALID from \"../../../actions/PhoneNumberValidation/Invalid/ACTION_PHONE_INVALID\";\nimport ACTION_BOOKING_SUMMARY_NOT_ACTIVE from \"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";\nimport \"../GuestCheckout.css\";\n\nconst PhoneNumber = () => {\n  const dispatch = useDispatch(); // Phone Number States\n\n  const phoneNumber = useSelector(state => state.phoneNumber.phone_number);\n  const phoneIsValid = useSelector(state => state.phoneIsValid.phone_valid);\n  const phoneIsInvalid = useSelector(state => state.phoneIsInvalid.phone_invalid);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        phoneNumberAlreadyRegistered = _useState2[0],\n        changePhoneNumberAlreadyRegistered = _useState2[1]; // Regular Expression for Phone Number Validation - allows only phone numbers in the format (xxx) xxx - xxx, with x values being digits\n\n\n  const phoneNumberReg = /^(\\(\\d\\d\\d\\))+\\s+(\\d\\d\\d)+\\s+(-)+\\s+(\\d\\d\\d\\d)$/g; // Regular Expression for Autocompleted Phone Numbers - allows phone numbers in the format 1xxxxxxxxxx, with x values being digits and the leading 1 country code being optional.\n\n  const phoneNumberAutocompleteReg = /^(1*\\d{10})$/g;\n\n  const _useQuery = useQuery(getClientsQuery, {\n    fetchPolicy: \"no-cache\"\n  }),\n        data = _useQuery.data;\n\n  const validatePhoneNumber = number => {\n    const validPhoneNumber = phoneNumberReg.test(number);\n    const validPhoneAutocomplete = phoneNumberAutocompleteReg.test(number);\n\n    if (!phoneNumberAlreadyRegistered) {\n      if (validPhoneNumber || validPhoneAutocomplete) {\n        dispatch(ACTION_PHONE_VALID());\n        dispatch(ACTION_PHONE_NOT_INVALID());\n      } else {\n        dispatch(ACTION_PHONE_NOT_VALID());\n        dispatch(ACTION_PHONE_INVALID());\n        dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n      }\n    } else {\n      dispatch(ACTION_PHONE_NOT_VALID());\n      dispatch(ACTION_PHONE_INVALID());\n      dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n    }\n  };\n\n  const handlePhoneNumber = e => {\n    validatePhoneNumber(e.currentTarget.value);\n    dispatch(ACTION_PHONE_NUMBER(e.currentTarget.value));\n  };\n\n  useMemo(() => {\n    if (phoneNumber) {\n      if (data) {\n        for (let i = 0; i < data.clients.length; i++) {\n          if (data.clients[i].phoneNumber === phoneNumber && (data.clients[i].password !== null || data.clients[i].tokenCount > 0)) {\n            changePhoneNumberAlreadyRegistered(true);\n            dispatch(ACTION_PHONE_NOT_VALID());\n            dispatch(ACTION_PHONE_INVALID());\n            dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\n          }\n        }\n      }\n    }\n  }, [data, phoneNumber, dispatch]);\n\n  const phoneNumberTyping = e => {\n    let currentTyping = e.currentTarget.value;\n    changePhoneNumberAlreadyRegistered(false);\n    dispatch(ACTION_PHONE_NUMBER_RESET()); // Formatting for US Phone Numbers\n\n    if (currentTyping.length === 3) {\n      currentTyping = currentTyping.split(\"\");\n      currentTyping.unshift(\"(\");\n      currentTyping.push(\") \");\n      currentTyping = currentTyping.join(\"\");\n    } else {\n      if (currentTyping.length === 4) {\n        if (currentTyping.indexOf(\"(\") === 0 && currentTyping.indexOf(\")\") < 0) {\n          currentTyping = currentTyping.split(\"\");\n          currentTyping.splice(currentTyping.indexOf(\"(\"), 1);\n          currentTyping = currentTyping.join(\"\");\n        } else {\n          if (currentTyping.indexOf(\"(\") < 0 && currentTyping.indexOf(\")\") < 0) {\n            currentTyping = currentTyping.split(\"\");\n            currentTyping.unshift(\"(\");\n            currentTyping.splice(4, 0, \") \");\n            currentTyping = currentTyping.join(\"\");\n          }\n        }\n      } else {\n        if (currentTyping.length === 6) {\n          if (currentTyping.indexOf(\" \") < 0) {\n            currentTyping = currentTyping.split(\"\");\n            currentTyping.splice(5, 0, \" \");\n            currentTyping = currentTyping.join(\"\");\n          }\n        } else {\n          if (currentTyping.length === 10) {\n            if (currentTyping.lastIndexOf(\" \") === 5) {\n              currentTyping = currentTyping.split(\"\");\n              currentTyping.splice(9, 0, \" - \");\n              currentTyping = currentTyping.join(\"\");\n            } else {\n              if (currentTyping.indexOf(\"(\") < 0) {\n                currentTyping = currentTyping.split(\"\");\n                currentTyping.unshift(\"(\");\n                currentTyping.splice(4, 0, \") \");\n                currentTyping.splice(8, 0, \" - \");\n                currentTyping = currentTyping.join(\"\");\n              }\n            }\n          } else {\n            if (currentTyping.length === 11) {\n              if (currentTyping.lastIndexOf(\" \") === 9 && currentTyping.indexOf(\"-\") < 0) {\n                currentTyping = currentTyping.split(\"\");\n                currentTyping.splice(9, 0, \" -\");\n                currentTyping = currentTyping.join(\"\");\n              }\n            } else {\n              if (currentTyping.length === 12) {\n                if (currentTyping.lastIndexOf(\" \") === 9) {\n                  currentTyping = currentTyping.split(\"\");\n                  currentTyping.splice(11, 0, \" \");\n                  currentTyping = currentTyping.join(\"\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    e.currentTarget.value = currentTyping;\n  };\n\n  const phoneNumberKeyTyping = e => {\n    if (e.keyCode >= 8 && e.keyCode < 32 || e.keyCode >= 37 && e.keyCode <= 40 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode >= 48 && e.keyCode <= 57) {\n      return e.keyCode;\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"phoneNumber\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"required_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"Phone Number\", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"required_label red_asterisk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }\n  }, \"* \"))), /*#__PURE__*/React.createElement(Input, {\n    type: \"tel\",\n    name: \"phoneNumber\",\n    maxLength: 16,\n    onKeyDown: phoneNumberKeyTyping,\n    defaultValue: phoneNumber,\n    placeholder: \"Phone number\",\n    onChange: phoneNumberTyping,\n    onBlur: handlePhoneNumber,\n    className: \"input_field\",\n    invalid: phoneNumber === \"\" ? false : phoneIsInvalid ? true : false,\n    valid: phoneNumber === \"\" ? false : phoneIsValid ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }), phoneNumberAlreadyRegistered ? /*#__PURE__*/React.createElement(FormFeedback, {\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, \"This phone number has already been registered.\") : /*#__PURE__*/React.createElement(FormFeedback, {\n    invalid: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, \"Please enter a valid phone number.\"));\n};\n\nexport default PhoneNumber;","map":{"version":3,"sources":["D:/WebProjects/Barbershops/MERN-barberShops/HighEnd/Client/src/components/checkout/Form/PhoneNumber.js"],"names":["React","useMemo","useState","useDispatch","useSelector","FormGroup","FormFeedback","Label","Input","useQuery","getClientsQuery","ACTION_PHONE_NUMBER_RESET","ACTION_PHONE_NUMBER","ACTION_PHONE_VALID","ACTION_PHONE_NOT_INVALID","ACTION_PHONE_NOT_VALID","ACTION_PHONE_INVALID","ACTION_BOOKING_SUMMARY_NOT_ACTIVE","PhoneNumber","dispatch","phoneNumber","state","phone_number","phoneIsValid","phone_valid","phoneIsInvalid","phone_invalid","phoneNumberAlreadyRegistered","changePhoneNumberAlreadyRegistered","phoneNumberReg","phoneNumberAutocompleteReg","fetchPolicy","data","validatePhoneNumber","number","validPhoneNumber","test","validPhoneAutocomplete","handlePhoneNumber","e","currentTarget","value","i","clients","length","password","tokenCount","phoneNumberTyping","currentTyping","split","unshift","push","join","indexOf","splice","lastIndexOf","phoneNumberKeyTyping","keyCode","preventDefault"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormGroup, FormFeedback, Label, Input } from \"reactstrap\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport getClientsQuery from \"../../../graphql/queries/getClientsQuery\";\r\nimport ACTION_PHONE_NUMBER_RESET from \"../../../actions/GuestCheckoutForm/PhoneNumber/ACTION_PHONE_NUMBER_RESET\";\r\nimport ACTION_PHONE_NUMBER from \"../../../actions/GuestCheckoutForm/PhoneNumber/ACTION_PHONE_NUMBER\";\r\nimport ACTION_PHONE_VALID from \"../../../actions/PhoneNumberValidation/Valid/ACTION_PHONE_VALID\";\r\nimport ACTION_PHONE_NOT_INVALID from \"../../../actions/PhoneNumberValidation/Invalid/ACTION_PHONE_NOT_INVALID\";\r\nimport ACTION_PHONE_NOT_VALID from \"../../../actions/PhoneNumberValidation/Valid/ACTION_PHONE_NOT_VALID\";\r\nimport ACTION_PHONE_INVALID from \"../../../actions/PhoneNumberValidation/Invalid/ACTION_PHONE_INVALID\";\r\nimport ACTION_BOOKING_SUMMARY_NOT_ACTIVE from \"../../../actions/ContinueToBookingSummaryButtonActive/ACTION_BOOKING_SUMMARY_NOT_ACTIVE\";\r\nimport \"../GuestCheckout.css\";\r\n\r\nconst PhoneNumber = () => {\r\n  const dispatch = useDispatch();\r\n  // Phone Number States\r\n  const phoneNumber = useSelector((state) => state.phoneNumber.phone_number);\r\n  const phoneIsValid = useSelector((state) => state.phoneIsValid.phone_valid);\r\n  const phoneIsInvalid = useSelector(\r\n    (state) => state.phoneIsInvalid.phone_invalid\r\n  );\r\n  const [\r\n    phoneNumberAlreadyRegistered,\r\n    changePhoneNumberAlreadyRegistered,\r\n  ] = useState(false);\r\n\r\n  // Regular Expression for Phone Number Validation - allows only phone numbers in the format (xxx) xxx - xxx, with x values being digits\r\n  const phoneNumberReg = /^(\\(\\d\\d\\d\\))+\\s+(\\d\\d\\d)+\\s+(-)+\\s+(\\d\\d\\d\\d)$/g;\r\n\r\n  // Regular Expression for Autocompleted Phone Numbers - allows phone numbers in the format 1xxxxxxxxxx, with x values being digits and the leading 1 country code being optional.\r\n  const phoneNumberAutocompleteReg = /^(1*\\d{10})$/g;\r\n\r\n  const { data } = useQuery(getClientsQuery, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const validatePhoneNumber = (number) => {\r\n    const validPhoneNumber = phoneNumberReg.test(number);\r\n    const validPhoneAutocomplete = phoneNumberAutocompleteReg.test(number);\r\n\r\n    if (!phoneNumberAlreadyRegistered) {\r\n      if (validPhoneNumber || validPhoneAutocomplete) {\r\n        dispatch(ACTION_PHONE_VALID());\r\n        dispatch(ACTION_PHONE_NOT_INVALID());\r\n      } else {\r\n        dispatch(ACTION_PHONE_NOT_VALID());\r\n        dispatch(ACTION_PHONE_INVALID());\r\n        dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n      }\r\n    } else {\r\n      dispatch(ACTION_PHONE_NOT_VALID());\r\n      dispatch(ACTION_PHONE_INVALID());\r\n      dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n    }\r\n  };\r\n\r\n  const handlePhoneNumber = (e) => {\r\n    validatePhoneNumber(e.currentTarget.value);\r\n    dispatch(ACTION_PHONE_NUMBER(e.currentTarget.value));\r\n  };\r\n\r\n  useMemo(() => {\r\n    if (phoneNumber) {\r\n      if (data) {\r\n        for (let i = 0; i < data.clients.length; i++) {\r\n          if (\r\n            data.clients[i].phoneNumber === phoneNumber &&\r\n            (data.clients[i].password !== null ||\r\n              data.clients[i].tokenCount > 0)\r\n          ) {\r\n            changePhoneNumberAlreadyRegistered(true);\r\n            dispatch(ACTION_PHONE_NOT_VALID());\r\n            dispatch(ACTION_PHONE_INVALID());\r\n            dispatch(ACTION_BOOKING_SUMMARY_NOT_ACTIVE());\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [data, phoneNumber, dispatch]);\r\n\r\n  const phoneNumberTyping = (e) => {\r\n    let currentTyping = e.currentTarget.value;\r\n\r\n    changePhoneNumberAlreadyRegistered(false);\r\n    dispatch(ACTION_PHONE_NUMBER_RESET());\r\n\r\n    // Formatting for US Phone Numbers\r\n    if (currentTyping.length === 3) {\r\n      currentTyping = currentTyping.split(\"\");\r\n      currentTyping.unshift(\"(\");\r\n      currentTyping.push(\") \");\r\n\r\n      currentTyping = currentTyping.join(\"\");\r\n    } else {\r\n      if (currentTyping.length === 4) {\r\n        if (\r\n          currentTyping.indexOf(\"(\") === 0 &&\r\n          currentTyping.indexOf(\")\") < 0\r\n        ) {\r\n          currentTyping = currentTyping.split(\"\");\r\n          currentTyping.splice(currentTyping.indexOf(\"(\"), 1);\r\n\r\n          currentTyping = currentTyping.join(\"\");\r\n        } else {\r\n          if (\r\n            currentTyping.indexOf(\"(\") < 0 &&\r\n            currentTyping.indexOf(\")\") < 0\r\n          ) {\r\n            currentTyping = currentTyping.split(\"\");\r\n            currentTyping.unshift(\"(\");\r\n            currentTyping.splice(4, 0, \") \");\r\n\r\n            currentTyping = currentTyping.join(\"\");\r\n          }\r\n        }\r\n      } else {\r\n        if (currentTyping.length === 6) {\r\n          if (currentTyping.indexOf(\" \") < 0) {\r\n            currentTyping = currentTyping.split(\"\");\r\n            currentTyping.splice(5, 0, \" \");\r\n\r\n            currentTyping = currentTyping.join(\"\");\r\n          }\r\n        } else {\r\n          if (currentTyping.length === 10) {\r\n            if (currentTyping.lastIndexOf(\" \") === 5) {\r\n              currentTyping = currentTyping.split(\"\");\r\n              currentTyping.splice(9, 0, \" - \");\r\n\r\n              currentTyping = currentTyping.join(\"\");\r\n            } else {\r\n              if (currentTyping.indexOf(\"(\") < 0) {\r\n                currentTyping = currentTyping.split(\"\");\r\n                currentTyping.unshift(\"(\");\r\n                currentTyping.splice(4, 0, \") \");\r\n                currentTyping.splice(8, 0, \" - \");\r\n                currentTyping = currentTyping.join(\"\");\r\n              }\r\n            }\r\n          } else {\r\n            if (currentTyping.length === 11) {\r\n              if (\r\n                currentTyping.lastIndexOf(\" \") === 9 &&\r\n                currentTyping.indexOf(\"-\") < 0\r\n              ) {\r\n                currentTyping = currentTyping.split(\"\");\r\n                currentTyping.splice(9, 0, \" -\");\r\n\r\n                currentTyping = currentTyping.join(\"\");\r\n              }\r\n            } else {\r\n              if (currentTyping.length === 12) {\r\n                if (currentTyping.lastIndexOf(\" \") === 9) {\r\n                  currentTyping = currentTyping.split(\"\");\r\n                  currentTyping.splice(11, 0, \" \");\r\n\r\n                  currentTyping = currentTyping.join(\"\");\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    e.currentTarget.value = currentTyping;\r\n  };\r\n\r\n  const phoneNumberKeyTyping = (e) => {\r\n    if (\r\n      (e.keyCode >= 8 && e.keyCode < 32) ||\r\n      (e.keyCode >= 37 && e.keyCode <= 40) ||\r\n      (e.keyCode >= 96 && e.keyCode <= 105) ||\r\n      (e.keyCode >= 48 && e.keyCode <= 57)\r\n    ) {\r\n      return e.keyCode;\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <Label for=\"phoneNumber\">\r\n        <div className=\"required_label\">\r\n          Phone Number<p className=\"required_label red_asterisk\">* </p>\r\n        </div>\r\n      </Label>\r\n      <Input\r\n        type=\"tel\"\r\n        name=\"phoneNumber\"\r\n        maxLength={16}\r\n        onKeyDown={phoneNumberKeyTyping}\r\n        defaultValue={phoneNumber}\r\n        placeholder=\"Phone number\"\r\n        onChange={phoneNumberTyping}\r\n        onBlur={handlePhoneNumber}\r\n        className=\"input_field\"\r\n        invalid={phoneNumber === \"\" ? false : phoneIsInvalid ? true : false}\r\n        valid={phoneNumber === \"\" ? false : phoneIsValid ? true : false}\r\n      />\r\n      {phoneNumberAlreadyRegistered ? (\r\n        <FormFeedback invalid=\"true\">\r\n          This phone number has already been registered.\r\n        </FormFeedback>\r\n      ) : (\r\n        <FormFeedback invalid=\"true\">\r\n          Please enter a valid phone number.\r\n        </FormFeedback>\r\n      )}\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default PhoneNumber;\r\n"]},"metadata":{},"sourceType":"module"}